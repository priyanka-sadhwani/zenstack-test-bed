/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */

import type { Prisma, LabProfile } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateLabProfile(options?: Omit<(UseMutationOptions<(LabProfile | undefined), DefaultError, Prisma.LabProfileCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabProfileCreateArgs, DefaultError, LabProfile, true>('LabProfile', 'POST', `${endpoint}/labProfile/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabProfileCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabProfileCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LabProfile, Prisma.LabProfileGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LabProfileCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LabProfile, Prisma.LabProfileGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyLabProfile(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.LabProfileCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabProfileCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('LabProfile', 'POST', `${endpoint}/labProfile/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabProfileCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabProfileCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.LabProfileCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyLabProfile<TArgs extends Prisma.LabProfileFindManyArgs, TQueryFnData = Array<Prisma.LabProfileGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabProfileFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabProfile', `${endpoint}/labProfile/findMany`, args, options, fetch);
}

export function useInfiniteFindManyLabProfile<TArgs extends Prisma.LabProfileFindManyArgs, TQueryFnData = Array<Prisma.LabProfileGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabProfileFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('LabProfile', `${endpoint}/labProfile/findMany`, args, options, fetch);
}

export function useSuspenseFindManyLabProfile<TArgs extends Prisma.LabProfileFindManyArgs, TQueryFnData = Array<Prisma.LabProfileGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabProfileFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabProfile', `${endpoint}/labProfile/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyLabProfile<TArgs extends Prisma.LabProfileFindManyArgs, TQueryFnData = Array<Prisma.LabProfileGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabProfileFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('LabProfile', `${endpoint}/labProfile/findMany`, args, options, fetch);
}

export function useFindUniqueLabProfile<TArgs extends Prisma.LabProfileFindUniqueArgs, TQueryFnData = Prisma.LabProfileGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LabProfileFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabProfile', `${endpoint}/labProfile/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueLabProfile<TArgs extends Prisma.LabProfileFindUniqueArgs, TQueryFnData = Prisma.LabProfileGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LabProfileFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabProfile', `${endpoint}/labProfile/findUnique`, args, options, fetch);
}

export function useFindFirstLabProfile<TArgs extends Prisma.LabProfileFindFirstArgs, TQueryFnData = Prisma.LabProfileGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabProfileFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabProfile', `${endpoint}/labProfile/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstLabProfile<TArgs extends Prisma.LabProfileFindFirstArgs, TQueryFnData = Prisma.LabProfileGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabProfileFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabProfile', `${endpoint}/labProfile/findFirst`, args, options, fetch);
}

export function useUpdateLabProfile(options?: Omit<(UseMutationOptions<(LabProfile | undefined), DefaultError, Prisma.LabProfileUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabProfileUpdateArgs, DefaultError, LabProfile, true>('LabProfile', 'PUT', `${endpoint}/labProfile/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabProfileUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabProfileUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LabProfile, Prisma.LabProfileGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LabProfileUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LabProfile, Prisma.LabProfileGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyLabProfile(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.LabProfileUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabProfileUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('LabProfile', 'PUT', `${endpoint}/labProfile/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabProfileUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabProfileUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.LabProfileUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertLabProfile(options?: Omit<(UseMutationOptions<(LabProfile | undefined), DefaultError, Prisma.LabProfileUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabProfileUpsertArgs, DefaultError, LabProfile, true>('LabProfile', 'POST', `${endpoint}/labProfile/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabProfileUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabProfileUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LabProfile, Prisma.LabProfileGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LabProfileUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LabProfile, Prisma.LabProfileGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteLabProfile(options?: Omit<(UseMutationOptions<(LabProfile | undefined), DefaultError, Prisma.LabProfileDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabProfileDeleteArgs, DefaultError, LabProfile, true>('LabProfile', 'DELETE', `${endpoint}/labProfile/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabProfileDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabProfileDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LabProfile, Prisma.LabProfileGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LabProfileDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LabProfile, Prisma.LabProfileGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyLabProfile(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.LabProfileDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabProfileDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('LabProfile', 'DELETE', `${endpoint}/labProfile/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabProfileDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabProfileDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.LabProfileDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateLabProfile<TArgs extends Prisma.LabProfileAggregateArgs, TQueryFnData = Prisma.GetLabProfileAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LabProfileAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabProfile', `${endpoint}/labProfile/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateLabProfile<TArgs extends Prisma.LabProfileAggregateArgs, TQueryFnData = Prisma.GetLabProfileAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LabProfileAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabProfile', `${endpoint}/labProfile/aggregate`, args, options, fetch);
}

export function useGroupByLabProfile<TArgs extends Prisma.LabProfileGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.LabProfileGroupByArgs['orderBy'] } : { orderBy?: Prisma.LabProfileGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.LabProfileGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.LabProfileGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.LabProfileGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.LabProfileGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.LabProfileGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabProfile', `${endpoint}/labProfile/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByLabProfile<TArgs extends Prisma.LabProfileGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.LabProfileGroupByArgs['orderBy'] } : { orderBy?: Prisma.LabProfileGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.LabProfileGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.LabProfileGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.LabProfileGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.LabProfileGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.LabProfileGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabProfile', `${endpoint}/labProfile/groupBy`, args, options, fetch);
}

export function useCountLabProfile<TArgs extends Prisma.LabProfileCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.LabProfileCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabProfileCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabProfile', `${endpoint}/labProfile/count`, args, options, fetch);
}

export function useSuspenseCountLabProfile<TArgs extends Prisma.LabProfileCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.LabProfileCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabProfileCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabProfile', `${endpoint}/labProfile/count`, args, options, fetch);
}

export function useCheckLabProfile<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; labId?: string; bio?: string; instagram?: string; profilePhotoId?: string; slug?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('LabProfile', `${endpoint}/labProfile/check`, args, options, fetch);
}
