import type { GetSchemaResult, SuccessfulLookupResult } from '@prisma/schema-files-loader';
type PackageJsonLookupResult = SuccessfulLookupResult | {
    ok: false;
    error: {
        kind: 'PackageJsonNotConfigured';
    };
};
export type GetSchemaOptions = {
    cwd?: string;
    argumentName?: string;
};
/**
 * Loads the schema, throws an error if it is not found
 * @param schemaPathFromArgs
 * @param schemaPathFromConfig
 * @param opts
 */
export declare function getSchemaWithPath(schemaPathFromArgs?: string, schemaPathFromConfig?: string, { cwd, argumentName }?: GetSchemaOptions): Promise<GetSchemaResult>;
/**
 * Loads the schema, returns null if it is not found
 * Throws an error if schema is specified explicitly in
 * any of the available ways (argument, package.json config), but
 * can not be loaded
 * @param schemaPathFromArgs
 * @param schemaPathFromConfig
 * @param opts
 * @returns
 */
export declare function getSchemaWithPathOptional(schemaPathFromArgs?: string, schemaPathFromConfig?: string, { cwd, argumentName }?: GetSchemaOptions): Promise<GetSchemaResult | null>;
export declare function printSchemaLoadedMessage(schemaPath: string): void;
/**
 * Trying to access this function results in a deprecation warning.
 * Users should be instructed to use the Prisma config file instead.
 * See: https://pris.ly/prisma-config.
 * @deprecated
 */
export declare function getSchemaFromPackageJson(cwd: string): Promise<PackageJsonLookupResult>;
export {};
