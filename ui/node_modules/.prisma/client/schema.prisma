//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Image {
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt()
  id           String        @id() @default(cuid())
  storageRef   String
  displayName  String?
  width        Int
  height       Int
  size         BigInt
  userProfiles UserProfile[]
  labProfiles  LabProfile[]
  contents     Content[]
  modules      Module[]
  classes      Class[]
}

model Video {
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt()
  id                String    @id() @default(cuid())
  storageRef        String
  displayName       String?
  durationMillis    Int
  width             Int?
  height            Int?
  size              BigInt
  previewForContent Content[]
  previewForModule  Module[]
  classes           Class[]
}

model User {
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()
  id          String        @id() @default(uuid())
  email       String        @unique()
  displayName String?
  profile     UserProfile?
  labs        UserLabJoin[]
  ownedLabs   Lab[]
}

model UserProfile {
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt()
  id             String   @id() @default(cuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @unique()
  bio            String?
  instagram      String?
  profilePhoto   Image?   @relation(fields: [profilePhotoId], references: [id], onDelete: SetNull)
  profilePhotoId String?
}

model Lab {
  published   Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt()
  id          String          @id() @default(cuid())
  name        String
  profile     LabProfile?
  owners      User[]
  community   UserLabJoin[]
  roles       Role[]
  privileges  Privilege[]
  content     Content[]
  permissions LabPermission[]
}

model LabProfile {
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt()
  id             String   @id() @default(cuid())
  lab            Lab      @relation(fields: [labId], references: [id], onDelete: Cascade)
  labId          String   @unique()
  bio            String?
  instagram      String?
  profilePhoto   Image?   @relation(fields: [profilePhotoId], references: [id], onDelete: SetNull)
  profilePhotoId String?
  slug           String?  @unique()
}

model UserLabJoin {
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt()
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  lab          Lab           @relation(fields: [labId], references: [id], onDelete: Restrict)
  labId        String
  userLabRoles UserLabRole[]

  @@id(name: "userLabJoinId", [userId, labId])
}

model Role {
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt()
  id               String              @id() @default(cuid())
  name             String
  shortDescription String?
  longDescription  String?
  lab              Lab                 @relation(fields: [labId], references: [id], onDelete: Cascade)
  labId            String
  userLabRoles     UserLabRole[]
  privileges       RolePrivilegeJoin[]
  public           Boolean             @default(false)
  priority         Int                 @default(0)
  isTeamRole       Boolean             @default(false)

  @@unique([labId, id])
  @@unique([name, labId])
}

model UserLabRole {
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt()
  userLabJoin UserLabJoin @relation(fields: [userId, labId], references: [userId, labId], onDelete: Cascade)
  userId      String
  labId       String
  role        Role        @relation(fields: [labId, roleId], references: [labId, id], onDelete: Cascade)
  roleId      String
  expiresAt   DateTime?

  @@id(name: "userLabRoleId", [userId, labId, roleId])
}

model Privilege {
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt()
  id               String              @id() @default(cuid())
  name             String
  longDescription  String?
  shortDescription String
  lab              Lab                 @relation(fields: [labId], references: [id], onDelete: Cascade)
  labId            String
  roles            RolePrivilegeJoin[]
  labPermissions   LabPermission[]
  public           Boolean             @default(false)

  @@unique([name, labId])
}

model LabPermission {
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt()
  id         String      @id() @default(cuid())
  name       String
  lab        Lab         @relation(fields: [labId], references: [id], onDelete: Cascade)
  labId      String
  privileges Privilege[]
  type       String

  @@unique([name, labId])
}

model RolePrivilegeJoin {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId      String
  privilege   Privilege @relation(fields: [privilegeId], references: [id], onDelete: Cascade)
  privilegeId String
  order       Int?

  @@id(name: "rolePrivilegeJoinId", [roleId, privilegeId])
}

model Content {
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt()
  id               String   @id() @default(cuid())
  lab              Lab      @relation(fields: [labId], references: [id], onDelete: Cascade)
  labId            String
  name             String
  shortDescription String?
  longDescription  String?
  thumbnail        Image?   @relation(fields: [thumbnailId], references: [id])
  thumbnailId      String?
  modules          Module[]
  published        Boolean
  previewVideo     Video?   @relation(fields: [previewVideoId], references: [id])
  previewVideoId   String?
  order            Int

  @@unique([labId, order])
}

model Module {
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt()
  id               String   @id() @default(cuid())
  name             String
  shortDescription String?
  longDescription  String?
  thumbnail        Image?   @relation(fields: [thumbnailId], references: [id])
  thumbnailId      String?
  content          Content  @relation(fields: [contentId], references: [id], onDelete: Restrict)
  contentId        String
  classes          Class[]
  order            Int
  published        Boolean
  category         String?
  previewVideo     Video?   @relation(fields: [previewVideoId], references: [id])
  previewVideoId   String?

  @@unique([order, category, contentId])
}

model Class {
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt()
  id               String   @id() @default(cuid())
  name             String
  shortDescription String?
  longDescription  String?
  thumbnail        Image?   @relation(fields: [thumbnailId], references: [id])
  thumbnailId      String?
  module           Module   @relation(fields: [moduleId], references: [id], onDelete: Restrict)
  moduleId         String
  order            Int
  published        Boolean
  video            Video?   @relation(fields: [videoId], references: [id])
  videoId          String?
  category         String?

  @@unique([order, category, moduleId])
}
