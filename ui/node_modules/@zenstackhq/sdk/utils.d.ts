import { AstNode, Attribute, AttributeParam, ConfigExpr, DataModel, DataModelAttribute, DataModelField, DataModelFieldAttribute, Enum, EnumField, Expression, FunctionDecl, InternalAttribute, Model, Reference, ReferenceExpr, TypeDef, TypeDefField } from '@zenstackhq/language/ast';
import { ExpressionContext } from './constants';
import { type PluginDeclaredOptions, type PluginOptions } from './types';
/**
 * Gets data models in the ZModel schema.
 */
export declare function getDataModels(model: Model, includeIgnored?: boolean): DataModel[];
/**
 * Gets data models and type defs in the ZModel schema.
 */
export declare function getDataModelAndTypeDefs(model: Model, includeIgnored?: boolean): (DataModel | TypeDef)[];
export declare function resolved<T extends AstNode>(ref: Reference<T>): T;
export declare function getLiteral<T extends string | number | boolean | any = any>(expr: Expression | ConfigExpr | undefined): T | undefined;
export declare function getArray(expr: Expression | ConfigExpr | undefined): Expression[] | (import("@zenstackhq/language/ast").LiteralExpr | import("@zenstackhq/language/ast").ConfigInvocationExpr)[] | undefined;
export declare function getLiteralArray<T extends string | number | boolean | any = any>(expr: Expression | ConfigExpr | undefined): T[] | undefined;
export declare function getObjectLiteral<T>(expr: Expression | ConfigExpr | undefined): T | undefined;
export declare function indentString(string: string, count?: number): string;
export declare function hasAttribute(decl: DataModel | TypeDef | DataModelField | TypeDefField | Enum | EnumField | FunctionDecl | Attribute | AttributeParam, name: string): boolean;
export declare function getAttribute(decl: DataModel | TypeDef | DataModelField | TypeDefField | Enum | EnumField | FunctionDecl | Attribute | AttributeParam, name: string): DataModelAttribute | DataModelFieldAttribute | undefined;
export declare function getAttributeArgs(attr: DataModelAttribute | DataModelFieldAttribute | InternalAttribute): Record<string, Expression>;
export declare function getAttributeArg(attr: DataModelAttribute | DataModelFieldAttribute | InternalAttribute, name: string): Expression | undefined;
export declare function getAttributeArgLiteral<T extends string | number | boolean>(attr: DataModelAttribute | DataModelFieldAttribute, name: string): T | undefined;
export declare function isEnumFieldReference(node: AstNode): node is ReferenceExpr;
export declare function isDataModelFieldReference(node: AstNode): node is ReferenceExpr;
/**
 * Gets `@@id` fields declared at the data model level (including search in base models)
 */
export declare function getModelIdFields(model: DataModel): DataModelField[];
/**
 * Gets `@@unique` fields declared at the data model level (including search in base models)
 */
export declare function getModelUniqueFields(model: DataModel): DataModelField[];
/**
 * Returns if the given field is declared as an id field.
 */
export declare function isIdField(field: DataModelField): boolean;
/**
 * Returns if the given field is a relation field.
 */
export declare function isRelationshipField(field: DataModelField): boolean;
/**
 * Returns if the given field is a relation foreign key field.
 */
export declare function isForeignKeyField(field: DataModelField): boolean;
/**
 * Gets the foreign key-id field pairs from the given relation field.
 */
export declare function getRelationKeyPairs(relationField: DataModelField): {
    id: DataModelField;
    foreignKey: DataModelField;
}[];
/**
 * Gets the relation field of the given foreign key field.
 */
export declare function getRelationField(fkField: DataModelField): DataModelField | undefined;
/**
 * Gets the foreign key fields of the given relation field.
 */
export declare function getForeignKeyFields(relationField: DataModelField): DataModelField[];
export declare function resolvePath(_path: string, options: Pick<PluginOptions, 'schemaPath'>): string;
export declare function requireOption<T>(options: PluginDeclaredOptions, name: string, pluginName: string): T;
export declare function parseOptionAsStrings(options: PluginDeclaredOptions, optionName: string, pluginName: string): string[] | undefined;
export declare function getFunctionExpressionContext(funcDecl: FunctionDecl): ExpressionContext[];
export declare function isFutureExpr(node: AstNode): boolean;
export declare function isAuthInvocation(node: AstNode): boolean;
export declare function isFromStdlib(node: AstNode): boolean;
export declare function getContainingModel(node: AstNode | undefined): Model | null;
export declare function getPreviewFeatures(model: Model): string[] | undefined;
export declare function getAuthDecl(decls: (DataModel | TypeDef)[]): DataModel | TypeDef | undefined;
export declare function isDelegateModel(node: AstNode): boolean;
export declare function isDiscriminatorField(field: DataModelField): boolean;
export declare function getIdFields(decl: DataModel | TypeDef): (DataModelField | TypeDefField)[];
export declare function getFieldReference(expr: Expression): DataModelField | TypeDefField | undefined;
export declare function getModelFieldsWithBases(model: DataModel, includeDelegate?: boolean): DataModelField[];
export declare function getRecursiveBases(dataModel: DataModel, includeDelegate?: boolean, seen?: Set<DataModel>): DataModel[];
export declare function ensureEmptyDir(dir: string): void;
/**
 * Gets the data source provider from the given model.
 */
export declare function getDataSourceProvider(model: Model): string | undefined;
/**
 * Finds the original delegate base model that defines the given field.
 */
export declare function getInheritedFromDelegate(field: DataModelField): DataModel | undefined;
/**
 * Gets the inheritance chain from "from" to "to", excluding them.
 */
export declare function getInheritanceChain(from: DataModel, to: DataModel): DataModel[] | undefined;
/**
 * Get the opposite side of a relation field.
 */
export declare function getRelationBackLink(field: DataModelField): DataModelField | undefined;
/**
 * Get the relation name of a relation field.
 */
export declare function getRelationName(field: DataModelField): string | number | boolean | undefined;
export declare function getPrismaClientGenerator(model: Model): {
    name: string;
    output: string | undefined;
    previewFeatures: string[] | undefined;
    provider: string | undefined;
    isNewGenerator: boolean;
} | undefined;
