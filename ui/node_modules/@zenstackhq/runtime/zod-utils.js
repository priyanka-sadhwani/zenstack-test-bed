"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.smartUnion = smartUnion;
/**
 * A smarter version of `z.union` that decide which candidate to use based on how few unrecognized keys it has.
 *
 * The helper is used to deal with ambiguity in union generated for Prisma inputs when the zod schemas are configured
 * to run in "strip" object parsing mode. Since "strip" automatically drops unrecognized keys, it may result in
 * accidentally matching a less-ideal schema candidate.
 *
 * The helper uses a custom schema to find the candidate that results in the fewest unrecognized keys when parsing the data.
 *
 * The function uses `any` for parameter and return type to be compatible with various zod versions.
 */
function smartUnion(z, candidates) {
    // strip `z.lazy`
    const processedCandidates = candidates.map((candidate) => unwrapLazy(z, candidate));
    if (processedCandidates.some((c) => !(c instanceof z.ZodObject || c instanceof z.ZodArray))) {
        // fall back to plain union if not all candidates are objects or arrays
        return z.union(candidates);
    }
    let resultData;
    return z
        .custom((data) => {
        if (Array.isArray(data)) {
            const { data: result, success } = smartArrayUnion(z, processedCandidates.filter((c) => c instanceof z.ZodArray), data);
            if (success) {
                resultData = result;
            }
            return success;
        }
        else {
            const { data: result, success } = smartObjectUnion(z, processedCandidates.filter((c) => c instanceof z.ZodObject), data);
            if (success) {
                resultData = result;
            }
            return success;
        }
    })
        .transform(() => {
        // return the parsed data
        return resultData;
    });
}
function smartArrayUnion(z, candidates, data) {
    if (candidates.length === 0) {
        return { data: undefined, success: false };
    }
    if (!Array.isArray(data)) {
        return { data: undefined, success: false };
    }
    if (data.length === 0) {
        return { data, success: true };
    }
    // use the first element to identify the candidate schema to use
    const item = data[0];
    const itemSchema = identifyCandidate(z, candidates.map((candidate) => candidate.element), item);
    // find the matching schema and re-parse the data
    const schema = candidates.find((candidate) => candidate.element === itemSchema);
    return schema.safeParse(data);
}
function smartObjectUnion(z, candidates, data) {
    if (candidates.length === 0) {
        return { data: undefined, success: false };
    }
    const schema = identifyCandidate(z, candidates, data);
    return schema.safeParse(data);
}
function identifyCandidate(z, candidates, data) {
    const strictResults = candidates.map((candidate) => {
        // make sure to strip `z.lazy` before parsing
        const unwrapped = unwrapLazy(z, candidate);
        return {
            schema: candidate,
            // force object schema to run in strict mode to capture unrecognized keys
            result: unwrapped.strict().safeParse(data),
        };
    });
    // find the schema with the fewest unrecognized keys
    const { schema } = strictResults.sort((a, b) => {
        var _a, _b, _c, _d;
        const aCount = countUnrecognizedKeys((_b = (_a = a.result.error) === null || _a === void 0 ? void 0 : _a.issues) !== null && _b !== void 0 ? _b : []);
        const bCount = countUnrecognizedKeys((_d = (_c = b.result.error) === null || _c === void 0 ? void 0 : _c.issues) !== null && _d !== void 0 ? _d : []);
        return aCount - bCount;
    })[0];
    return schema;
}
function countUnrecognizedKeys(issues) {
    return issues
        .filter((issue) => issue.code === 'unrecognized_keys')
        .map((issue) => issue.keys.length)
        .reduce((a, b) => a + b, 0);
}
function unwrapLazy(z, schema) {
    if (!(schema instanceof z.ZodLazy)) {
        return schema;
    }
    if ('unwrap' in schema && typeof schema.unwrap === 'function') {
        return schema.unwrap();
    }
    else if ('schema' in schema) {
        return schema.schema;
    }
    else {
        throw new Error('Unable to determine how to unwrap a lazy schema with this zod version.');
    }
}
//# sourceMappingURL=zod-utils.js.map