import * as _tanstack_angular_query_v5 from '@tanstack/angular-query-experimental';
import { CreateQueryOptions, CreateInfiniteQueryOptions, InfiniteData, CreateMutationOptions } from '@tanstack/angular-query-experimental';
import { ModelMeta } from '@zenstackhq/runtime/cross';
import { InjectionToken } from '@angular/core';
import { A as APIContext, F as FetchFn, a as ExtraQueryOptions, E as ExtraMutationOptions } from './common-CXlL7vTW.mjs';

declare const AngularQueryContextKey: InjectionToken<APIContext>;
/**
 * Provide context for the generated TanStack Query hooks.
 */
declare function provideAngularQueryContext(context: APIContext): {
    provide: InjectionToken<APIContext>;
    useValue: APIContext;
};
/**
 * Hooks context.
 */
declare function getHooksContext(): {
    fetch?: FetchFn;
    logging?: boolean;
    endpoint: string;
};
/**
 * Creates an Angular TanStack Query query.
 *
 * @param model The name of the model under query.
 * @param url The request URL.
 * @param args The request args object, URL-encoded and appended as "?q=" parameter
 * @param options The Angular query options object
 * @param fetch The fetch function to use for sending the HTTP request
 * @returns injectQuery hook
 */
declare function useModelQuery<TQueryFnData, TData, TError>(model: string, url: string, args?: unknown, options?: Omit<CreateQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions, fetch?: FetchFn): _tanstack_angular_query_v5.CreateQueryResult<TData, TError>;
/**
 * Creates an Angular TanStack Query infinite query.
 *
 * @param model The name of the model under query.
 * @param url The request URL.
 * @param args The initial request args object, URL-encoded and appended as "?q=" parameter
 * @param options The Angular infinite query options object
 * @param fetch The fetch function to use for sending the HTTP request
 * @returns injectInfiniteQuery hook
 */
declare function useInfiniteModelQuery<TQueryFnData, TData, TError>(model: string, url: string, args: unknown, options: Omit<CreateInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>, fetch?: FetchFn): _tanstack_angular_query_v5.CreateInfiniteQueryResult<InfiniteData<TData, unknown>, TError>;
/**
 * Creates an Angular TanStack Query mutation.
 *
 * @param model The name of the model under mutation.
 * @param method The HTTP method.
 * @param url The request URL.
 * @param modelMeta The model metadata.
 * @param options The Angular mutation options.
 * @param fetch The fetch function to use for sending the HTTP request
 * @param checkReadBack Whether to check for read back errors and return undefined if found.
 * @returns injectMutation hook
 */
declare function useModelMutation<TArgs, TError, R = any, C extends boolean = boolean, Result = C extends true ? R | undefined : R>(model: string, method: 'POST' | 'PUT' | 'DELETE', url: string, modelMeta: ModelMeta, options?: Omit<CreateMutationOptions<Result, TError, TArgs>, 'mutationFn'> & ExtraMutationOptions, fetch?: FetchFn, checkReadBack?: C): _tanstack_angular_query_v5.CreateMutationResult<Result, TError, TArgs, unknown>;

export { AngularQueryContextKey, APIContext as RequestHandlerContext, getHooksContext, provideAngularQueryContext, useInfiniteModelQuery, useModelMutation, useModelQuery };
