import * as svelte_store from 'svelte/store';
import * as _tanstack_svelte_query from '@tanstack/svelte-query';
import { CreateQueryOptions, CreateInfiniteQueryOptions, MutationOptions } from '@tanstack/svelte-query';
import { ModelMeta } from '@zenstackhq/runtime/cross';
import { A as APIContext, F as FetchFn, a as ExtraQueryOptions, E as ExtraMutationOptions } from './common-CXlL7vTW.js';

/**
 * Key for setting and getting the global query context.
 */
declare const SvelteQueryContextKey = "zenstack-svelte-query-context";
/**
 * Set context for the generated TanStack Query hooks.
 */
declare function setHooksContext(context: APIContext): void;
/**
 * Hooks context.
 */
declare function getHooksContext(): {
    fetch?: FetchFn;
    logging?: boolean;
    endpoint: string;
};
/**
 * Creates a svelte-query query.
 *
 * @param model The name of the model under query.
 * @param url The request URL.
 * @param args The request args object, URL-encoded and appended as "?q=" parameter
 * @param options The svelte-query options object
 * @param fetch The fetch function to use for sending the HTTP request
 * @returns useQuery hook
 */
declare function useModelQuery<TQueryFnData, TData, TError>(model: string, url: string, args?: unknown, options?: Omit<CreateQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions, fetch?: FetchFn): svelte_store.Readable<{
    data: TData;
    error: TError;
    isError: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_svelte_query.RefetchOptions & _tanstack_svelte_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_svelte_query.QueryObserverResult<TData, TError>>;
    remove: () => void;
    fetchStatus: _tanstack_svelte_query.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
} | {
    data: TData;
    error: null;
    isError: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_svelte_query.RefetchOptions & _tanstack_svelte_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_svelte_query.QueryObserverResult<TData, TError>>;
    remove: () => void;
    fetchStatus: _tanstack_svelte_query.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
} | {
    data: undefined;
    error: TError;
    isError: true;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_svelte_query.RefetchOptions & _tanstack_svelte_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_svelte_query.QueryObserverResult<TData, TError>>;
    remove: () => void;
    fetchStatus: _tanstack_svelte_query.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
} | {
    data: undefined;
    error: null;
    isError: false;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "loading";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_svelte_query.RefetchOptions & _tanstack_svelte_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_svelte_query.QueryObserverResult<TData, TError>>;
    remove: () => void;
    fetchStatus: _tanstack_svelte_query.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
}>;
/**
 * Creates a svelte-query infinite query.
 *
 * @param model The name of the model under query.
 * @param url The request URL.
 * @param args The initial request args object, URL-encoded and appended as "?q=" parameter
 * @param options The svelte-query infinite query options object
 * @param fetch The fetch function to use for sending the HTTP request
 * @returns useQuery hook
 */
declare function useInfiniteModelQuery<TQueryFnData, TData, TError>(model: string, url: string, args?: unknown, options?: Omit<CreateInfiniteQueryOptions<TQueryFnData, TError, TData>, 'queryKey'>, fetch?: FetchFn): svelte_store.Readable<{
    data: undefined;
    error: TError;
    isError: true;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    fetchNextPage: (options?: _tanstack_svelte_query.FetchNextPageOptions) => Promise<_tanstack_svelte_query.InfiniteQueryObserverResult<TData, TError>>;
    fetchPreviousPage: (options?: _tanstack_svelte_query.FetchPreviousPageOptions) => Promise<_tanstack_svelte_query.InfiniteQueryObserverResult<TData, TError>>;
    hasNextPage?: boolean;
    hasPreviousPage?: boolean;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_svelte_query.RefetchOptions & _tanstack_svelte_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_svelte_query.QueryObserverResult<_tanstack_svelte_query.InfiniteData<TData>, TError>>;
    remove: () => void;
    fetchStatus: _tanstack_svelte_query.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
} | {
    data: undefined;
    error: null;
    isError: false;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "loading";
    fetchNextPage: (options?: _tanstack_svelte_query.FetchNextPageOptions) => Promise<_tanstack_svelte_query.InfiniteQueryObserverResult<TData, TError>>;
    fetchPreviousPage: (options?: _tanstack_svelte_query.FetchPreviousPageOptions) => Promise<_tanstack_svelte_query.InfiniteQueryObserverResult<TData, TError>>;
    hasNextPage?: boolean;
    hasPreviousPage?: boolean;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_svelte_query.RefetchOptions & _tanstack_svelte_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_svelte_query.QueryObserverResult<_tanstack_svelte_query.InfiniteData<TData>, TError>>;
    remove: () => void;
    fetchStatus: _tanstack_svelte_query.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
} | {
    data: _tanstack_svelte_query.InfiniteData<TData>;
    error: TError;
    isError: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    fetchNextPage: (options?: _tanstack_svelte_query.FetchNextPageOptions) => Promise<_tanstack_svelte_query.InfiniteQueryObserverResult<TData, TError>>;
    fetchPreviousPage: (options?: _tanstack_svelte_query.FetchPreviousPageOptions) => Promise<_tanstack_svelte_query.InfiniteQueryObserverResult<TData, TError>>;
    hasNextPage?: boolean;
    hasPreviousPage?: boolean;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_svelte_query.RefetchOptions & _tanstack_svelte_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_svelte_query.QueryObserverResult<_tanstack_svelte_query.InfiniteData<TData>, TError>>;
    remove: () => void;
    fetchStatus: _tanstack_svelte_query.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
} | {
    data: _tanstack_svelte_query.InfiniteData<TData>;
    error: null;
    isError: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    fetchNextPage: (options?: _tanstack_svelte_query.FetchNextPageOptions) => Promise<_tanstack_svelte_query.InfiniteQueryObserverResult<TData, TError>>;
    fetchPreviousPage: (options?: _tanstack_svelte_query.FetchPreviousPageOptions) => Promise<_tanstack_svelte_query.InfiniteQueryObserverResult<TData, TError>>;
    hasNextPage?: boolean;
    hasPreviousPage?: boolean;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_svelte_query.RefetchOptions & _tanstack_svelte_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_svelte_query.QueryObserverResult<_tanstack_svelte_query.InfiniteData<TData>, TError>>;
    remove: () => void;
    fetchStatus: _tanstack_svelte_query.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
}>;
/**
 * Creates a POST mutation with svelte-query.
 *
 * @param model The name of the model under mutation.
 * @param method The HTTP method.
 * @param modelMeta The model metadata.
 * @param url The request URL.
 * @param options The svelte-query options.
 * @param checkReadBack Whether to check for read back errors and return undefined if found.
 * @returns useMutation hooks
 */
declare function useModelMutation<TArgs, TError, R = any, C extends boolean = boolean, Result = C extends true ? R | undefined : R>(model: string, method: 'POST' | 'PUT' | 'DELETE', url: string, modelMeta: ModelMeta, options?: Omit<MutationOptions<Result, TError, TArgs>, 'mutationFn'> & ExtraMutationOptions, fetch?: FetchFn, checkReadBack?: C): _tanstack_svelte_query.CreateMutationResult<Result, TError, TArgs, unknown>;

export { APIContext as RequestHandlerContext, SvelteQueryContextKey, getHooksContext, setHooksContext, useInfiniteModelQuery, useModelMutation, useModelQuery };
