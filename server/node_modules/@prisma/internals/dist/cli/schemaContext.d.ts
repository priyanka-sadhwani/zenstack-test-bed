import { DataSource, GeneratorConfig } from '@prisma/generator';
import { GetSchemaResult, LoadedFile } from '@prisma/schema-files-loader';
export type SchemaContext = {
    /**
     * All loaded schema files and their paths.
     */
    schemaFiles: LoadedFile[];
    /**
     * The root directory of the schema files.
     * Either set explicitly from a schema folder based config or the parent directory of the schema.prisma file.
     */
    schemaRootDir: string;
    /**
     * The directory of the schema.prisma file that contains the datasource block.
     * Some relative paths like SQLite paths or SSL file paths are resolved relative to it.
     */
    primaryDatasourceDirectory: string;
    /**
     * The path that shall be printed in user facing logs messages informing them from where the schema was loaded.
     */
    loadedFromPathForLogMessages: string;
    /**
     * The datasource extracted from the Prisma schema. So far we only support a single datasource block.
     */
    primaryDatasource: DataSource | undefined;
    /**
     * Warnings that were raised during Prisma schema parsing.
     */
    warnings: string[] | [];
    /**
     * The datasources extracted from the Prisma schema. Prefer to use primaryDatasource for most cases.
     */
    datasources: DataSource[] | [];
    /**
     * The generators extracted from the Prisma schema.
     */
    generators: GeneratorConfig[] | [];
    schemaPath: string;
};
type LoadSchemaContextOptions = {
    schemaPathFromArg?: string;
    schemaPathFromConfig?: string;
    printLoadMessage?: boolean;
    ignoreEnvVarErrors?: boolean;
    allowNull?: boolean;
    schemaPathArgumentName?: string;
    cwd?: string;
};
export declare function loadSchemaContext(opts: LoadSchemaContextOptions & {
    allowNull: true;
}): Promise<SchemaContext | null>;
export declare function loadSchemaContext(opts?: LoadSchemaContextOptions): Promise<SchemaContext>;
export declare function processSchemaResult({ schemaResult, printLoadMessage, ignoreEnvVarErrors, cwd, }: {
    schemaResult: GetSchemaResult;
    printLoadMessage?: boolean;
    ignoreEnvVarErrors?: boolean;
    cwd?: string;
}): Promise<SchemaContext>;
export {};
