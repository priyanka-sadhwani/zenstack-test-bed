"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_OAT7ZJED_exports = {};
__export(chunk_OAT7ZJED_exports, {
  getEngineVersion: () => getEngineVersion,
  safeGetEngineVersion: () => safeGetEngineVersion
});
module.exports = __toCommonJS(chunk_OAT7ZJED_exports);
var import_chunk_6TTRTZXU = require("./chunk-6TTRTZXU.js");
var import_chunk_JOIHHXR6 = require("./chunk-JOIHHXR6.js");
var import_chunk_FYZCPL2Z = require("./chunk-FYZCPL2Z.js");
var import_chunk_5DBOS77Y = require("./chunk-5DBOS77Y.js");
var import_engines = require("@prisma/engines");
var import_fetch_engine = require("@prisma/fetch-engine");
var import_get_platform = require("@prisma/get-platform");
async function getEngineVersion(enginePath, binaryName) {
  if (!binaryName) {
    binaryName = (0, import_engines.getCliQueryEngineBinaryType)();
  }
  enginePath = await (0, import_chunk_FYZCPL2Z.resolveBinary)(binaryName, enginePath);
  const platformInfo = await (0, import_get_platform.getPlatformInfo)();
  if (binaryName === import_fetch_engine.BinaryType.QueryEngineLibrary) {
    (0, import_get_platform.assertNodeAPISupported)();
    const QE = (0, import_chunk_6TTRTZXU.loadLibrary)(enginePath, platformInfo);
    return `${import_fetch_engine.BinaryType.QueryEngineLibrary} ${QE.version().commit}`;
  } else {
    const { stdout } = await (0, import_chunk_JOIHHXR6.execa)(enginePath, ["--version"]);
    return stdout;
  }
}
function safeGetEngineVersion(enginePath, binaryName) {
  return (0, import_chunk_5DBOS77Y.tryCatch2)(
    () => getEngineVersion(enginePath, binaryName),
    (error) => error
  );
}
