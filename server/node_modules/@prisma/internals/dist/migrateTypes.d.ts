export declare namespace MigrateTypes {
    type MigrationDirectory = {
        /**
         * Relative path to a migration directory from `baseDir`.
         * E.g., `./20201117144659_test`.
         */
        path: string;
        /**
         * Description of the migration file in the directory.
         */
        migrationFile: {
            /**
             * Relative path to the migration file from `path`.
             */
            path: 'migration.sql';
            /**
             * Content of the migration file.
             * E.g.,
             * ```sql
             * -- CreateTable
             * CREATE TABLE "Blog" (
             *     "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
             *
             *     "viewCount20" INTEGER NOT NULL
             * );
             * ```
             */
            content: Tagged<'ok', {
                value: string;
            }> | Tagged<'error', {
                value: string;
            }>;
        };
    };
    type MigrationLockfile = {
        /**
         * Relative path to the lockfile from `baseDir`.
         */
        path: 'migration_lock.toml';
        /**
         * Content of the lockfile, if it exists.
         * E.g.,
         * ```toml
         * # Please do not edit this file manually
         * provider = "sqlite"
         * ```
         */
        content: string | null;
    };
    type MigrationList = {
        /**
         * Absolute path to the base directory of Prisma migrations.
         * E.g., `/usr/src/app/prisma/migrations`.
         */
        baseDir: string;
        /**
         * Description of the lockfile, which may or may not exist.
         */
        lockfile: MigrationLockfile;
        /**
         * An init script that will be run on the shadow database before the migrations are applied.
         * Useful in combination with external tables. Can be empty.
         * Set via `migrations.initShadowDb` in `prisma.config.ts`.
         */
        shadowDbInitScript: string;
        /**
         * Description of the migration directories.
         */
        migrationDirectories: Array<MigrationDirectory>;
    };
    type SchemaContainer = {
        path: string;
        content: string;
    };
    type SchemasContainer = {
        files: SchemaContainer[];
    };
    type SchemasWithConfigDir = {
        files: SchemaContainer[];
        configDir: string;
    };
    type SchemaFilter = {
        externalTables: string[];
        externalEnums: string[];
    };
    type UrlContainer = {
        url: string;
    };
    type DatasourceParam = Tagged<'ConnectionString', UrlContainer> | Tagged<'Schema', SchemasContainer>;
    type GetDatabaseVersionParams = {
        datasource: MigrateTypes.DatasourceParam;
    };
    type Tagged<Tag extends string, T> = Display<{
        tag: Tag;
    } & T>;
    type Display<T> = {
        [K in keyof T]: T[K];
    } & unknown;
}
