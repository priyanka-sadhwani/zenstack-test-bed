
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.ImageScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  storageRef: 'storageRef',
  displayName: 'displayName',
  width: 'width',
  height: 'height',
  size: 'size'
};

exports.Prisma.VideoScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  storageRef: 'storageRef',
  displayName: 'displayName',
  durationMillis: 'durationMillis',
  width: 'width',
  height: 'height',
  size: 'size'
};

exports.Prisma.UserScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  email: 'email',
  displayName: 'displayName'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  userId: 'userId',
  bio: 'bio',
  instagram: 'instagram',
  profilePhotoId: 'profilePhotoId'
};

exports.Prisma.LabScalarFieldEnum = {
  published: 'published',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  name: 'name'
};

exports.Prisma.LabProfileScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  labId: 'labId',
  bio: 'bio',
  instagram: 'instagram',
  profilePhotoId: 'profilePhotoId',
  slug: 'slug'
};

exports.Prisma.UserLabJoinScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  labId: 'labId'
};

exports.Prisma.RoleScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  name: 'name',
  shortDescription: 'shortDescription',
  longDescription: 'longDescription',
  labId: 'labId',
  public: 'public',
  priority: 'priority',
  isTeamRole: 'isTeamRole'
};

exports.Prisma.UserLabRoleScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  labId: 'labId',
  roleId: 'roleId',
  expiresAt: 'expiresAt'
};

exports.Prisma.PrivilegeScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  name: 'name',
  longDescription: 'longDescription',
  shortDescription: 'shortDescription',
  labId: 'labId',
  public: 'public'
};

exports.Prisma.LabPermissionScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  name: 'name',
  labId: 'labId',
  type: 'type'
};

exports.Prisma.RolePrivilegeJoinScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  roleId: 'roleId',
  privilegeId: 'privilegeId',
  order: 'order'
};

exports.Prisma.ContentScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  labId: 'labId',
  name: 'name',
  shortDescription: 'shortDescription',
  longDescription: 'longDescription',
  thumbnailId: 'thumbnailId',
  published: 'published',
  previewVideoId: 'previewVideoId',
  order: 'order'
};

exports.Prisma.ModuleScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  name: 'name',
  shortDescription: 'shortDescription',
  longDescription: 'longDescription',
  thumbnailId: 'thumbnailId',
  contentId: 'contentId',
  order: 'order',
  published: 'published',
  category: 'category',
  previewVideoId: 'previewVideoId'
};

exports.Prisma.ClassScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  name: 'name',
  shortDescription: 'shortDescription',
  longDescription: 'longDescription',
  thumbnailId: 'thumbnailId',
  moduleId: 'moduleId',
  order: 'order',
  published: 'published',
  videoId: 'videoId',
  category: 'category'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Image: 'Image',
  Video: 'Video',
  User: 'User',
  UserProfile: 'UserProfile',
  Lab: 'Lab',
  LabProfile: 'LabProfile',
  UserLabJoin: 'UserLabJoin',
  Role: 'Role',
  UserLabRole: 'UserLabRole',
  Privilege: 'Privilege',
  LabPermission: 'LabPermission',
  RolePrivilegeJoin: 'RolePrivilegeJoin',
  Content: 'Content',
  Module: 'Module',
  Class: 'Class'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
