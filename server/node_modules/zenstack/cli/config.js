"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = void 0;
exports.loadConfig = loadConfig;
const fs_1 = __importDefault(require("fs"));
const zod_1 = __importStar(require("zod"));
const cli_error_1 = require("./cli-error");
// TODO: future use
const schema = zod_1.default.object({});
exports.config = schema.parse({});
/**
 * Loads and validates CLI configuration file.
 * @returns
 */
function loadConfig(filename) {
    try {
        const fileData = fs_1.default.readFileSync(filename, `utf-8`);
        const content = JSON.parse(fileData);
        exports.config = schema.parse(content);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
    }
    catch (err) {
        if ((err === null || err === void 0 ? void 0 : err.code) === `ENOENT`) {
            throw new cli_error_1.CliError(`Config file could not be found: ${filename}`);
        }
        if (err instanceof SyntaxError) {
            throw new cli_error_1.CliError(`Config is not a valid JSON file: ${filename}`);
        }
        if (err instanceof zod_1.ZodError) {
            throw new cli_error_1.CliError(`Config file ${filename} is not valid: ${err}`);
        }
        throw new cli_error_1.CliError(`Error loading config: ${filename}`);
    }
}
//# sourceMappingURL=config.js.map