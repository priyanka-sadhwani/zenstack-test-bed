import { type EnhancementContext, type EnhancementOptions } from '@zenstackhq/runtime';
import { type PrismaClient } from '@prisma/client';
import type * as _P from '@prisma/client';
export type { PrismaClient };
/**
 * Infers the type of PrismaClient with ZenStack's enhancements.
 * @example
 * type EnhancedPrismaClient = Enhanced<typeof prisma>;
 */
export type Enhanced<Client> = Client;
export declare namespace auth {
    type WithRequired<T, K extends keyof T> = T & {
        [P in K]-?: T[P];
    };
    export type User = WithRequired<Partial<_P.User>, 'id'> & {
        labs: UserLabJoin[];
    } & Record<string, unknown>;
    export type UserLabJoin = Partial<_P.UserLabJoin> & {
        userLabRoles: UserLabRole[];
    } & Record<string, unknown>;
    export type UserLabRole = Partial<_P.UserLabRole> & {
        role: Role;
    } & Record<string, unknown>;
    export type RolePrivilegeJoin = Partial<_P.RolePrivilegeJoin> & {
        privilege: Privilege;
    } & Record<string, unknown>;
    export type Role = Partial<_P.Role> & {
        privileges: RolePrivilegeJoin[];
    } & Record<string, unknown>;
    export type LabPermission = Partial<_P.LabPermission> & Record<string, unknown>;
    export type Privilege = Partial<_P.Privilege> & {
        labPermissions: LabPermission[];
    } & Record<string, unknown>;
    export {};
}
export declare function enhance<DbClient extends object>(prisma: DbClient, context?: EnhancementContext<auth.User>, options?: EnhancementOptions): DbClient;
