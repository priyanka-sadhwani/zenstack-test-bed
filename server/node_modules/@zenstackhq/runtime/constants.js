"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ACTIONS_WITH_WRITE_PAYLOAD = exports.DELEGATE_AUX_RELATION_PREFIX = exports.PRISMA_MINIMUM_VERSION = exports.PRISMA_PROXY_ENHANCER = exports.PrismaErrorCode = exports.CrudFailureReason = exports.DEFAULT_PASSWORD_SALT_LENGTH = exports.DEFAULT_RUNTIME_LOAD_PATH = void 0;
/**
 * Default path for loading CLI-generated code
 */
exports.DEFAULT_RUNTIME_LOAD_PATH = '.zenstack';
/**
 * Default length of password hash salt (used by bcryptjs to hash password)
 */
exports.DEFAULT_PASSWORD_SALT_LENGTH = 12;
/**
 * Reasons for a CRUD operation to fail
 */
var CrudFailureReason;
(function (CrudFailureReason) {
    /**
     * CRUD failed because of access policy violation.
     */
    CrudFailureReason["ACCESS_POLICY_VIOLATION"] = "ACCESS_POLICY_VIOLATION";
    /**
     * CRUD succeeded but the result was not readable.
     */
    CrudFailureReason["RESULT_NOT_READABLE"] = "RESULT_NOT_READABLE";
    /**
     * CRUD failed because of a data validation rule violation.
     */
    CrudFailureReason["DATA_VALIDATION_VIOLATION"] = "DATA_VALIDATION_VIOLATION";
})(CrudFailureReason || (exports.CrudFailureReason = CrudFailureReason = {}));
/**
 * Prisma error codes used
 */
var PrismaErrorCode;
(function (PrismaErrorCode) {
    /**
     * Unique constraint failed
     */
    PrismaErrorCode["UNIQUE_CONSTRAINT_FAILED"] = "P2002";
    /**
     * A constraint failed on the database
     */
    PrismaErrorCode["CONSTRAINT_FAILED"] = "P2004";
    /**
     * The required connected records were not found
     */
    PrismaErrorCode["REQUIRED_CONNECTED_RECORD_NOT_FOUND"] = "P2018";
    /**
     * An operation failed because it depends on one or more records that were required but not found
     */
    PrismaErrorCode["DEPEND_ON_RECORD_NOT_FOUND"] = "P2025";
})(PrismaErrorCode || (exports.PrismaErrorCode = PrismaErrorCode = {}));
/**
 * Field name for getting current enhancer
 */
exports.PRISMA_PROXY_ENHANCER = '$__zenstack_enhancer';
/**
 * Minimum Prisma version supported
 */
exports.PRISMA_MINIMUM_VERSION = '5.0.0';
/**
 * Prefix for auxiliary relation field generated for delegated models
 */
exports.DELEGATE_AUX_RELATION_PREFIX = 'delegate_aux';
/**
 * Prisma actions that can have a write payload
 */
exports.ACTIONS_WITH_WRITE_PAYLOAD = [
    'create',
    'createMany',
    'createManyAndReturn',
    'update',
    'updateMany',
    'updateManyAndReturn',
    'upsert',
];
//# sourceMappingURL=constants.js.map