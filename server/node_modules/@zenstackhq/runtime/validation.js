"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationError = void 0;
exports.validate = validate;
exports.hasAllFields = hasAllFields;
exports.allFieldsEqual = allFieldsEqual;
const local_helpers_1 = require("./local-helpers");
/**
 * Error indicating violations of field-level constraints
 */
class ValidationError {
    constructor(message) {
        this.message = message;
    }
}
exports.ValidationError = ValidationError;
/**
 * Validate the given data with the given zod schema (for field-level constraints)
 */
function validate(validator, data) {
    try {
        validator.parse(data);
    }
    catch (err) {
        throw new ValidationError((0, local_helpers_1.getZodErrorMessage)(err));
    }
}
/**
 * Check if the given object has all the given fields, not null or undefined
 * @param obj
 * @param fields
 * @returns
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function hasAllFields(obj, fields) {
    if (typeof obj !== 'object' || !obj) {
        return false;
    }
    return fields.every((f) => obj[f] !== undefined && obj[f] !== null);
}
/**
 * Check if the given objects have equal values for the given fields. Returns
 * false if either object is nullish or is not an object.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function allFieldsEqual(obj1, obj2, fields) {
    if (!obj1 || !obj2 || typeof obj1 !== 'object' || typeof obj2 !== 'object') {
        return false;
    }
    return fields.every((f) => obj1[f] === obj2[f]);
}
//# sourceMappingURL=validation.js.map