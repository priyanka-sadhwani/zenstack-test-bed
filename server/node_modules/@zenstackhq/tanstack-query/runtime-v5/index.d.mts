export { E as ExtraMutationOptions, a as ExtraQueryOptions, F as FetchFn, Q as QueryError, g as getQueryKey } from './common-CXlL7vTW.mjs';

type Enumerable<T> = T | Array<T>;
type _TupleToUnion<T> = T extends (infer E)[] ? E : never;
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>;
type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T;
type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Pick<T, MaybeTupleToUnion<K>>;
type SelectAndInclude = {
    select: any;
    include: any;
};
type HasSelect = {
    select: any;
};
type HasInclude = {
    include: any;
};
type CheckSelect<T, S, U> = T extends SelectAndInclude ? 'Please either choose `select` or `include`' : T extends HasSelect ? U : T extends HasInclude ? U : S;

export type { CheckSelect, Enumerable, MaybeTupleToUnion, PickEnumerable, TupleToUnion };
