import * as _tanstack_svelte_query_v5 from '@tanstack/svelte-query';
import { StoreOrVal, CreateQueryOptions, CreateInfiniteQueryOptions, InfiniteData, MutationOptions } from '@tanstack/svelte-query';
import { ModelMeta } from '@zenstackhq/runtime/cross';
import { Readable } from 'svelte/store';
import { A as APIContext, F as FetchFn, a as ExtraQueryOptions, E as ExtraMutationOptions } from './common-CXlL7vTW.mjs';

/**
 * Key for setting and getting the global query context.
 */
declare const SvelteQueryContextKey = "zenstack-svelte-query-context";
/**
 * Set context for the generated TanStack Query hooks.
 */
declare function setHooksContext(context: APIContext): void;
/**
 * Hooks context.
 */
declare function getHooksContext(): {
    fetch?: FetchFn;
    logging?: boolean;
    endpoint: string;
};
/**
 * Creates a svelte-query query.
 *
 * @param model The name of the model under query.
 * @param url The request URL.
 * @param args The request args object, URL-encoded and appended as "?q=" parameter
 * @param options The svelte-query options object
 * @param fetch The fetch function to use for sending the HTTP request
 * @returns useQuery hook
 */
declare function useModelQuery<TQueryFnData, TData, TError>(model: string, url: string, args?: unknown, options?: StoreOrVal<Omit<CreateQueryOptions<TQueryFnData, TError, TData>, 'queryKey'>> & ExtraQueryOptions, fetch?: FetchFn): Readable<{
    data: TData;
    error: TError;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: _tanstack_svelte_query_v5.RefetchOptions) => Promise<_tanstack_svelte_query_v5.QueryObserverResult<TData, TError>>;
    fetchStatus: _tanstack_svelte_query_v5.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
} | {
    data: TData;
    error: null;
    isError: false;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: _tanstack_svelte_query_v5.RefetchOptions) => Promise<_tanstack_svelte_query_v5.QueryObserverResult<TData, TError>>;
    fetchStatus: _tanstack_svelte_query_v5.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
} | {
    data: undefined;
    error: TError;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: _tanstack_svelte_query_v5.RefetchOptions) => Promise<_tanstack_svelte_query_v5.QueryObserverResult<TData, TError>>;
    fetchStatus: _tanstack_svelte_query_v5.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
} | {
    data: undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: _tanstack_svelte_query_v5.RefetchOptions) => Promise<_tanstack_svelte_query_v5.QueryObserverResult<TData, TError>>;
    fetchStatus: _tanstack_svelte_query_v5.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
} | {
    data: undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isLoading: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: _tanstack_svelte_query_v5.RefetchOptions) => Promise<_tanstack_svelte_query_v5.QueryObserverResult<TData, TError>>;
    fetchStatus: _tanstack_svelte_query_v5.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
}>;
/**
 * Creates a svelte-query infinite query.
 *
 * @param model The name of the model under query.
 * @param url The request URL.
 * @param args The initial request args object, URL-encoded and appended as "?q=" parameter
 * @param options The svelte-query infinite query options object
 * @returns useQuery hook
 */
declare function useInfiniteModelQuery<TQueryFnData, TData, TError>(model: string, url: string, args: unknown, options: StoreOrVal<Omit<CreateInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>, fetch?: FetchFn): Readable<{
    data: InfiniteData<TData, unknown>;
    error: TError;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isFetchNextPageError: false;
    isFetchPreviousPageError: false;
    isSuccess: false;
    status: "error";
    fetchNextPage: (options?: _tanstack_svelte_query_v5.FetchNextPageOptions) => Promise<_tanstack_svelte_query_v5.InfiniteQueryObserverResult<InfiniteData<TData, unknown>, TError>>;
    fetchPreviousPage: (options?: _tanstack_svelte_query_v5.FetchPreviousPageOptions) => Promise<_tanstack_svelte_query_v5.InfiniteQueryObserverResult<InfiniteData<TData, unknown>, TError>>;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: _tanstack_svelte_query_v5.RefetchOptions) => Promise<_tanstack_svelte_query_v5.QueryObserverResult<InfiniteData<TData, unknown>, TError>>;
    fetchStatus: _tanstack_svelte_query_v5.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
} | {
    data: InfiniteData<TData, unknown>;
    error: null;
    isError: false;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isFetchNextPageError: false;
    isFetchPreviousPageError: false;
    isSuccess: true;
    status: "success";
    fetchNextPage: (options?: _tanstack_svelte_query_v5.FetchNextPageOptions) => Promise<_tanstack_svelte_query_v5.InfiniteQueryObserverResult<InfiniteData<TData, unknown>, TError>>;
    fetchPreviousPage: (options?: _tanstack_svelte_query_v5.FetchPreviousPageOptions) => Promise<_tanstack_svelte_query_v5.InfiniteQueryObserverResult<InfiniteData<TData, unknown>, TError>>;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: _tanstack_svelte_query_v5.RefetchOptions) => Promise<_tanstack_svelte_query_v5.QueryObserverResult<InfiniteData<TData, unknown>, TError>>;
    fetchStatus: _tanstack_svelte_query_v5.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
} | {
    data: undefined;
    error: TError;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isFetchNextPageError: false;
    isFetchPreviousPageError: false;
    isSuccess: false;
    status: "error";
    fetchNextPage: (options?: _tanstack_svelte_query_v5.FetchNextPageOptions) => Promise<_tanstack_svelte_query_v5.InfiniteQueryObserverResult<InfiniteData<TData, unknown>, TError>>;
    fetchPreviousPage: (options?: _tanstack_svelte_query_v5.FetchPreviousPageOptions) => Promise<_tanstack_svelte_query_v5.InfiniteQueryObserverResult<InfiniteData<TData, unknown>, TError>>;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: _tanstack_svelte_query_v5.RefetchOptions) => Promise<_tanstack_svelte_query_v5.QueryObserverResult<InfiniteData<TData, unknown>, TError>>;
    fetchStatus: _tanstack_svelte_query_v5.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
} | {
    data: undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isFetchNextPageError: false;
    isFetchPreviousPageError: false;
    isSuccess: false;
    status: "pending";
    fetchNextPage: (options?: _tanstack_svelte_query_v5.FetchNextPageOptions) => Promise<_tanstack_svelte_query_v5.InfiniteQueryObserverResult<InfiniteData<TData, unknown>, TError>>;
    fetchPreviousPage: (options?: _tanstack_svelte_query_v5.FetchPreviousPageOptions) => Promise<_tanstack_svelte_query_v5.InfiniteQueryObserverResult<InfiniteData<TData, unknown>, TError>>;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: _tanstack_svelte_query_v5.RefetchOptions) => Promise<_tanstack_svelte_query_v5.QueryObserverResult<InfiniteData<TData, unknown>, TError>>;
    fetchStatus: _tanstack_svelte_query_v5.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
} | {
    data: undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoadingError: false;
    isRefetchError: false;
    isFetchNextPageError: false;
    isFetchPreviousPageError: false;
    isSuccess: false;
    status: "pending";
    fetchNextPage: (options?: _tanstack_svelte_query_v5.FetchNextPageOptions) => Promise<_tanstack_svelte_query_v5.InfiniteQueryObserverResult<InfiniteData<TData, unknown>, TError>>;
    fetchPreviousPage: (options?: _tanstack_svelte_query_v5.FetchPreviousPageOptions) => Promise<_tanstack_svelte_query_v5.InfiniteQueryObserverResult<InfiniteData<TData, unknown>, TError>>;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: TError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isLoading: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: _tanstack_svelte_query_v5.RefetchOptions) => Promise<_tanstack_svelte_query_v5.QueryObserverResult<InfiniteData<TData, unknown>, TError>>;
    fetchStatus: _tanstack_svelte_query_v5.FetchStatus;
    queryKey: [string, string, string, unknown, {
        infinite: boolean;
        optimisticUpdate: boolean;
    }];
}>;
/**
 * Creates a POST mutation with svelte-query.
 *
 * @param model The name of the model under mutation.
 * @param method The HTTP method.
 * @param modelMeta The model metadata.
 * @param url The request URL.
 * @param options The svelte-query options.
 * @returns useMutation hooks
 */
declare function useModelMutation<TArgs, TError, R = any, C extends boolean = boolean, Result = C extends true ? R | undefined : R>(model: string, method: 'POST' | 'PUT' | 'DELETE', url: string, modelMeta: ModelMeta, options?: Omit<MutationOptions<Result, TError, TArgs>, 'mutationFn'> & ExtraMutationOptions, fetch?: FetchFn, checkReadBack?: C): _tanstack_svelte_query_v5.CreateMutationResult<Result, TError, TArgs, unknown>;

export { APIContext as RequestHandlerContext, SvelteQueryContextKey, getHooksContext, setHooksContext, useInfiniteModelQuery, useModelMutation, useModelQuery };
