"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/runtime-v5/vue.ts
var vue_exports = {};
__export(vue_exports, {
  VueQueryContextKey: () => VueQueryContextKey,
  getHooksContext: () => getHooksContext,
  provideHooksContext: () => provideHooksContext,
  useInfiniteModelQuery: () => useInfiniteModelQuery,
  useModelMutation: () => useModelMutation,
  useModelQuery: () => useModelQuery
});
module.exports = __toCommonJS(vue_exports);
var import_vue_query = require("@tanstack/vue-query");
var import_vue = require("vue");

// src/runtime/common.ts
var import_browser = require("@zenstackhq/runtime/browser");
var import_cross = require("@zenstackhq/runtime/cross");
var DEFAULT_QUERY_ENDPOINT = "/api/model";
var QUERY_KEY_PREFIX = "zenstack";
function fetcher(url, options, customFetch, checkReadBack) {
  return __async(this, null, function* () {
    var _a, _b, _c;
    const _fetch = customFetch != null ? customFetch : (
      // check if fetch is available globally
      typeof fetch === "function" ? fetch : (
        // fallback to 'cross-fetch' if otherwise
        (yield import("cross-fetch")).default
      )
    );
    const res = yield _fetch(url, options);
    if (!res.ok) {
      const errData = unmarshal(yield res.text());
      if (checkReadBack !== false && ((_a = errData.error) == null ? void 0 : _a.prisma) && ((_b = errData.error) == null ? void 0 : _b.code) === "P2004" && ((_c = errData.error) == null ? void 0 : _c.reason) === "RESULT_NOT_READABLE") {
        return void 0;
      }
      const error = new Error("An error occurred while fetching the data.");
      error.info = errData.error;
      error.status = res.status;
      throw error;
    }
    const textResult = yield res.text();
    try {
      return unmarshal(textResult).data;
    } catch (err) {
      console.error(`Unable to deserialize data:`, textResult);
      throw err;
    }
  });
}
function getQueryKey(model, urlOrOperation, args, options = { infinite: false, optimisticUpdate: true }) {
  if (!urlOrOperation) {
    throw new Error("Invalid urlOrOperation");
  }
  const operation = urlOrOperation.split("/").pop();
  const infinite = options.infinite;
  const optimisticUpdate2 = options.infinite ? false : options.optimisticUpdate;
  return [QUERY_KEY_PREFIX, model, operation, args, { infinite, optimisticUpdate: optimisticUpdate2 }];
}
function marshal(value) {
  const { data, meta } = (0, import_browser.serialize)(value);
  if (meta) {
    return JSON.stringify(__spreadProps(__spreadValues({}, data), { meta: { serialization: meta } }));
  } else {
    return JSON.stringify(data);
  }
}
function unmarshal(value) {
  var _a;
  const parsed = JSON.parse(value);
  if (typeof parsed === "object" && (parsed == null ? void 0 : parsed.data) && ((_a = parsed == null ? void 0 : parsed.meta) == null ? void 0 : _a.serialization)) {
    const deserializedData = (0, import_browser.deserialize)(parsed.data, parsed.meta.serialization);
    return __spreadProps(__spreadValues({}, parsed), { data: deserializedData });
  } else {
    return parsed;
  }
}
function makeUrl(url, args) {
  if (!args) {
    return url;
  }
  const { data, meta } = (0, import_browser.serialize)(args);
  let result = `${url}?q=${encodeURIComponent(JSON.stringify(data))}`;
  if (meta) {
    result += `&meta=${encodeURIComponent(JSON.stringify({ serialization: meta }))}`;
  }
  return result;
}
function setupInvalidation(model, operation, modelMeta, options, invalidate, logging = false) {
  const origOnSuccess = options == null ? void 0 : options.onSuccess;
  options.onSuccess = (...args) => __async(this, null, function* () {
    const [_, variables] = args;
    const predicate = yield getInvalidationPredicate(
      model,
      operation,
      variables,
      modelMeta,
      logging
    );
    yield invalidate(predicate);
    return origOnSuccess == null ? void 0 : origOnSuccess(...args);
  });
}
function getInvalidationPredicate(model, operation, mutationArgs, modelMeta, logging = false) {
  return __async(this, null, function* () {
    const mutatedModels = yield (0, import_cross.getMutatedModels)(model, operation, mutationArgs, modelMeta);
    return ({ queryKey }) => {
      const [_, queryModel, , args] = queryKey;
      if (mutatedModels.includes(queryModel)) {
        if (logging) {
          console.log(`Invalidating query ${JSON.stringify(queryKey)} due to mutation "${model}.${operation}"`);
        }
        return true;
      }
      if (args) {
        if (findNestedRead(queryModel, mutatedModels, modelMeta, args)) {
          if (logging) {
            console.log(
              `Invalidating query ${JSON.stringify(queryKey)} due to mutation "${model}.${operation}"`
            );
          }
          return true;
        }
      }
      return false;
    };
  });
}
function findNestedRead(visitingModel, targetModels, modelMeta, args) {
  const modelsRead = (0, import_cross.getReadModels)(visitingModel, modelMeta, args);
  return targetModels.some((m) => modelsRead.includes(m));
}
function setupOptimisticUpdate(model, operation, modelMeta, options, queryCache, setCache, invalidate, logging = false) {
  const origOnMutate = options == null ? void 0 : options.onMutate;
  const origOnSettled = options == null ? void 0 : options.onSettled;
  options.onMutate = (...args) => __async(this, null, function* () {
    const [variables] = args;
    yield optimisticUpdate(
      model,
      operation,
      variables,
      options,
      modelMeta,
      queryCache,
      setCache,
      logging
    );
    return origOnMutate == null ? void 0 : origOnMutate(...args);
  });
  options.onSettled = (...args) => __async(this, null, function* () {
    if (invalidate) {
      const [, , variables] = args;
      const predicate = yield getInvalidationPredicate(
        model,
        operation,
        variables,
        modelMeta,
        logging
      );
      yield invalidate(predicate);
    }
    return origOnSettled == null ? void 0 : origOnSettled(...args);
  });
}
function optimisticUpdate(mutationModel, mutationOp, mutationArgs, options, modelMeta, queryCache, setCache, logging = false) {
  return __async(this, null, function* () {
    for (const cacheItem of queryCache) {
      const {
        queryKey,
        state: { data, error }
      } = cacheItem;
      if (!isZenStackQueryKey(queryKey)) {
        continue;
      }
      if (error) {
        if (logging) {
          console.warn(`Skipping optimistic update for ${JSON.stringify(queryKey)} due to error:`, error);
        }
        continue;
      }
      const [_, queryModel, queryOperation, queryArgs, queryOptions] = queryKey;
      if (!(queryOptions == null ? void 0 : queryOptions.optimisticUpdate)) {
        if (logging) {
          console.log(`Skipping optimistic update for ${JSON.stringify(queryKey)} due to opt-out`);
        }
        continue;
      }
      if (options.optimisticDataProvider) {
        const providerResult = yield options.optimisticDataProvider({
          queryModel,
          queryOperation,
          queryArgs,
          currentData: data,
          mutationArgs
        });
        if ((providerResult == null ? void 0 : providerResult.kind) === "Skip") {
          if (logging) {
            console.log(`Skipping optimistic update for ${JSON.stringify(queryKey)} due to provider`);
          }
          continue;
        } else if ((providerResult == null ? void 0 : providerResult.kind) === "Update") {
          if (logging) {
            console.log(`Optimistically updating query ${JSON.stringify(queryKey)} due to provider`);
          }
          setCache(queryKey, providerResult.data);
          continue;
        }
      }
      const mutatedData = yield (0, import_cross.applyMutation)(
        queryModel,
        queryOperation,
        data,
        mutationModel,
        mutationOp,
        mutationArgs,
        modelMeta,
        logging
      );
      if (mutatedData !== void 0) {
        if (logging) {
          console.log(
            `Optimistically updating query ${JSON.stringify(
              queryKey
            )} due to mutation "${mutationModel}.${mutationOp}"`
          );
        }
        setCache(queryKey, mutatedData);
      }
    }
  });
}
function isZenStackQueryKey(queryKey) {
  if (queryKey.length < 5) {
    return false;
  }
  if (queryKey[0] !== QUERY_KEY_PREFIX) {
    return false;
  }
  return true;
}

// src/runtime-v5/vue.ts
var VueQueryContextKey = "zenstack-vue-query-context";
function provideHooksContext(context) {
  (0, import_vue.provide)(VueQueryContextKey, context);
}
function getHooksContext() {
  const _a = (0, import_vue.inject)(VueQueryContextKey, {
    endpoint: DEFAULT_QUERY_ENDPOINT,
    fetch: void 0,
    logging: false
  }), { endpoint } = _a, rest = __objRest(_a, ["endpoint"]);
  return __spreadValues({ endpoint: endpoint != null ? endpoint : DEFAULT_QUERY_ENDPOINT }, rest);
}
function useModelQuery(model, url, args, options, fetch2) {
  const optionsValue = (0, import_vue.toValue)(options);
  const queryKey = getQueryKey(model, url, args, {
    infinite: false,
    optimisticUpdate: (optionsValue == null ? void 0 : optionsValue.optimisticUpdate) !== false
  });
  const queryOptions = (0, import_vue.computed)(
    () => {
      return __spreadValues({
        queryKey,
        queryFn: ({ queryKey: queryKey2, signal }) => {
          const [_prefix, _model, _op, args2] = queryKey2;
          const reqUrl = makeUrl(url, (0, import_vue.toValue)(args2));
          return fetcher(reqUrl, { signal }, fetch2, false);
        }
      }, optionsValue);
    }
  );
  return __spreadValues({ queryKey }, (0, import_vue_query.useQuery)(queryOptions));
}
function useInfiniteModelQuery(model, url, args, options, fetch2) {
  const queryKey = getQueryKey(model, url, args, { infinite: true, optimisticUpdate: false });
  const queryOptions = (0, import_vue.computed)(() => __spreadValues({
    queryKey,
    queryFn: ({ queryKey: queryKey2, pageParam, signal }) => {
      const [_prefix, _model, _op, args2] = queryKey2;
      const reqUrl = makeUrl(url, pageParam != null ? pageParam : (0, import_vue.toValue)(args2));
      return fetcher(reqUrl, { signal }, fetch2, false);
    },
    initialPageParam: (0, import_vue.toValue)(args)
  }, (0, import_vue.toValue)(options)));
  return __spreadValues({ queryKey }, (0, import_vue_query.useInfiniteQuery)(queryOptions));
}
function useModelMutation(model, method, url, modelMeta, options, fetch2, checkReadBack) {
  const queryClient = (0, import_vue_query.useQueryClient)();
  const mutationFn = (data) => {
    const reqUrl = method === "DELETE" ? makeUrl(url, data) : url;
    const fetchInit = __spreadValues({
      method
    }, method !== "DELETE" && {
      headers: {
        "content-type": "application/json"
      },
      body: marshal(data)
    });
    return fetcher(reqUrl, fetchInit, fetch2, checkReadBack);
  };
  const optionsValue = (0, import_vue.toValue)(options);
  const finalOptions = (0, import_vue.computed)(() => __spreadProps(__spreadValues({}, optionsValue), { mutationFn }));
  const operation = url.split("/").pop();
  const invalidateQueries = (optionsValue == null ? void 0 : optionsValue.invalidateQueries) !== false;
  const optimisticUpdate2 = !!(optionsValue == null ? void 0 : optionsValue.optimisticUpdate);
  if (operation) {
    const { logging } = getHooksContext();
    if (invalidateQueries) {
      setupInvalidation(
        model,
        operation,
        modelMeta,
        (0, import_vue.toValue)(finalOptions),
        (predicate) => queryClient.invalidateQueries({ predicate }),
        logging
      );
    }
    if (optimisticUpdate2) {
      setupOptimisticUpdate(
        model,
        operation,
        modelMeta,
        (0, import_vue.toValue)(finalOptions),
        queryClient.getQueryCache().getAll(),
        (queryKey, data) => queryClient.setQueryData(queryKey, data),
        invalidateQueries ? (predicate) => queryClient.invalidateQueries({ predicate }) : void 0,
        logging
      );
    }
  }
  return (0, import_vue_query.useMutation)(finalOptions);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  VueQueryContextKey,
  getHooksContext,
  provideHooksContext,
  useInfiniteModelQuery,
  useModelMutation,
  useModelQuery
});
//# sourceMappingURL=vue.js.map