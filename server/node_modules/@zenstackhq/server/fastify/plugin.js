"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZenStackFastifyPlugin = void 0;
const fastify_plugin_1 = __importDefault(require("fastify-plugin"));
const rpc_1 = __importDefault(require("../api/rpc"));
const utils_1 = require("../api/utils");
const shared_1 = require("../shared");
/**
 * Fastify plugin for handling CRUD requests.
 */
const pluginHandler = (fastify, options, done) => {
    const prefix = options.prefix ?? '';
    (0, utils_1.logInfo)(options.logger, `ZenStackPlugin installing routes at prefix: ${prefix}`);
    const { modelMeta, zodSchemas } = (0, shared_1.loadAssets)(options);
    const requestHandler = options.handler ?? (0, rpc_1.default)();
    fastify.all(`${prefix}/*`, async (request, reply) => {
        const prisma = (await options.getPrisma(request, reply));
        if (!prisma) {
            reply.status(500).send({ message: 'unable to get prisma from request context' });
            return reply;
        }
        try {
            const response = await requestHandler({
                method: request.method,
                path: request.params['*'],
                query: request.query,
                requestBody: request.body,
                prisma,
                modelMeta,
                zodSchemas,
                logger: options.logger,
            });
            reply.status(response.status).send(response.body);
        }
        catch (err) {
            reply.status(500).send({ message: `An unhandled error occurred: ${err}` });
        }
        return reply;
    });
    done();
};
const plugin = (0, fastify_plugin_1.default)(pluginHandler);
exports.ZenStackFastifyPlugin = plugin;
exports.default = plugin;
//# sourceMappingURL=plugin.js.map