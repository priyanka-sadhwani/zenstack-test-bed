"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEventHandler = createEventHandler;
const h3_1 = require("h3");
const rpc_1 = __importDefault(require("../api/rpc"));
const shared_1 = require("../shared");
function createEventHandler(options) {
    return (0, h3_1.defineEventHandler)(async (event) => {
        const { modelMeta, zodSchemas } = (0, shared_1.loadAssets)(options);
        const requestHandler = options.handler ?? (0, rpc_1.default)();
        const prisma = (await options.getPrisma(event));
        if (!prisma) {
            (0, h3_1.setResponseStatus)(event, 500);
            return { message: 'unable to get prisma from request context' };
        }
        const routerParam = (0, h3_1.getRouterParams)(event);
        const query = await (0, h3_1.getQuery)(event);
        let reqBody;
        if (event.method === 'POST' || event.method === 'PUT' || event.method === 'PATCH') {
            reqBody = await (0, h3_1.readBody)(event);
        }
        try {
            const { status, body } = await requestHandler({
                method: event.method,
                path: routerParam._,
                query: query,
                requestBody: reqBody,
                prisma,
                modelMeta,
                zodSchemas,
                logger: options.logger,
            });
            (0, h3_1.setResponseStatus)(event, status);
            return body;
        }
        catch (err) {
            (0, h3_1.setResponseStatus)(event, 500);
            return { message: `An unhandled error occurred: ${err}` };
        }
    });
}
//# sourceMappingURL=handler.js.map