"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ZenStackModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZenStackModule = void 0;
const common_1 = require("@nestjs/common");
const zenstack_constants_1 = require("./zenstack.constants");
/**
 * The ZenStack module for NestJS. The module exports an enhanced Prisma service,
 * by default with token {@link ENHANCED_PRISMA}.
 */
let ZenStackModule = ZenStackModule_1 = class ZenStackModule {
    /**
     * Registers the ZenStack module with the specified options.
     */
    static registerAsync(options) {
        return {
            module: ZenStackModule_1,
            global: options?.global,
            imports: options.imports,
            providers: [
                {
                    provide: options.exportToken ?? zenstack_constants_1.ENHANCED_PRISMA,
                    useFactory: async (
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    ...args) => {
                        const { getEnhancedPrisma } = await options.useFactory(...args);
                        if (!getEnhancedPrisma) {
                            throw new Error('`getEnhancedPrisma` must be provided in the options');
                        }
                        // create a proxy to intercept all calls to the Prisma service and forward
                        // to the enhanced version
                        return new Proxy({}, {
                            get(_target, prop) {
                                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                const enhancedPrisma = getEnhancedPrisma(prop);
                                if (!enhancedPrisma) {
                                    throw new Error('`getEnhancedPrisma` must return a valid Prisma client');
                                }
                                return enhancedPrisma[prop];
                            },
                        });
                    },
                    inject: options.inject,
                },
                ...(options.extraProviders ?? []),
            ],
            exports: [options.exportToken ?? zenstack_constants_1.ENHANCED_PRISMA],
        };
    }
};
exports.ZenStackModule = ZenStackModule;
exports.ZenStackModule = ZenStackModule = ZenStackModule_1 = __decorate([
    (0, common_1.Module)({})
], ZenStackModule);
//# sourceMappingURL=zenstack.module.js.map