"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHonoHandler = createHonoHandler;
const api_1 = require("../api");
const shared_1 = require("../shared");
function createHonoHandler(options) {
    const { modelMeta, zodSchemas } = (0, shared_1.loadAssets)(options);
    const requestHandler = options.handler ?? (0, api_1.RPCApiHandler)();
    return async (ctx) => {
        const prisma = (await options.getPrisma(ctx));
        if (!prisma) {
            return ctx.json({ message: 'unable to get prisma from request context' }, 500);
        }
        const url = new URL(ctx.req.url);
        const query = Object.fromEntries(url.searchParams);
        const path = ctx.req.path.substring(ctx.req.routePath.length - 1);
        if (!path) {
            return ctx.json({ message: 'missing path parameter' }, 400);
        }
        let requestBody;
        if (ctx.req.raw.body) {
            try {
                requestBody = await ctx.req.json();
            }
            catch {
                // noop
            }
        }
        try {
            const r = await requestHandler({
                method: ctx.req.method,
                path,
                query,
                requestBody,
                prisma,
                modelMeta,
                zodSchemas,
                logger: options.logger,
            });
            return ctx.json(r.body, r.status);
        }
        catch (err) {
            return ctx.json({ message: `An unhandled error occurred: ${err}` }, 500);
        }
    };
}
//# sourceMappingURL=handler.js.map