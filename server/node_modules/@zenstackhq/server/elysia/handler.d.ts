import { Elysia, Context as ElysiaContext } from 'elysia';
import { AdapterBaseOptions } from '../types';
/**
 * Options for initializing an Elysia middleware.
 */
export interface ElysiaOptions extends AdapterBaseOptions {
    /**
     * Callback method for getting a Prisma instance for the given request context.
     */
    getPrisma: (context: ElysiaContext) => Promise<unknown> | unknown;
    /**
     * Optional base path to strip from the request path before passing to the API handler.
     */
    basePath?: string;
}
/**
 * Creates an Elysia middleware handler for ZenStack.
 * This handler provides automatic CRUD APIs through Elysia's routing system.
 */
export declare function createElysiaHandler(options: ElysiaOptions): (app: Elysia) => Promise<Elysia<"", {
    decorator: {};
    store: {};
    derive: {};
    resolve: {};
}, {
    typebox: {};
    error: {};
}, {
    schema: {};
    standaloneSchema: {};
    macro: {};
    macroFn: {};
    parser: {};
}, {}, {
    derive: {};
    resolve: {};
    schema: {};
    standaloneSchema: {};
}, {
    derive: {};
    resolve: {};
    schema: {};
    standaloneSchema: {};
}>>;
