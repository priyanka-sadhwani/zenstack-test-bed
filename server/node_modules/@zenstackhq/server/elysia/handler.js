"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createElysiaHandler = createElysiaHandler;
const api_1 = require("../api");
const shared_1 = require("../shared");
/**
 * Creates an Elysia middleware handler for ZenStack.
 * This handler provides automatic CRUD APIs through Elysia's routing system.
 */
function createElysiaHandler(options) {
    const { modelMeta, zodSchemas } = (0, shared_1.loadAssets)(options);
    const requestHandler = options.handler ?? (0, api_1.RPCApiHandler)();
    return async (app) => {
        app.all('/*', async (ctx) => {
            const { request, body, set } = ctx;
            const prisma = (await options.getPrisma(ctx));
            if (!prisma) {
                set.status = 500;
                return {
                    message: 'unable to get prisma from request context',
                };
            }
            const url = new URL(request.url);
            const query = Object.fromEntries(url.searchParams);
            let path = url.pathname;
            if (options.basePath && path.startsWith(options.basePath)) {
                path = path.slice(options.basePath.length);
                if (!path.startsWith('/')) {
                    path = '/' + path;
                }
            }
            if (!path || path === '/') {
                set.status = 400;
                return {
                    message: 'missing path parameter',
                };
            }
            try {
                const r = await requestHandler({
                    method: request.method,
                    path,
                    query,
                    requestBody: body,
                    prisma,
                    modelMeta,
                    zodSchemas,
                    logger: options.logger,
                });
                set.status = r.status;
                return r.body;
            }
            catch (err) {
                set.status = 500;
                return {
                    message: 'An internal server error occurred',
                };
            }
        });
        return app;
    };
}
//# sourceMappingURL=handler.js.map