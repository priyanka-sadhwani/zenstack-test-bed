"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZenStackMiddleware = void 0;
const rpc_1 = require("../api/rpc");
const shared_1 = require("../shared");
/**
 * Creates an Express middleware for handling CRUD requests.
 */
const factory = (options) => {
    const { modelMeta, zodSchemas } = (0, shared_1.loadAssets)(options);
    const requestHandler = options.handler || (0, rpc_1.RPCApiHandler)();
    return async (request, response, next) => {
        const prisma = (await options.getPrisma(request, response));
        const { sendResponse } = options;
        if (sendResponse === false && !prisma) {
            throw new Error('unable to get prisma from request context');
        }
        if (!prisma) {
            return response.status(500).json({ message: 'unable to get prisma from request context' });
        }
        // express converts query parameters with square brackets into object
        // e.g.: filter[foo]=bar is parsed to { filter: { foo: 'bar' } }
        // we need to revert this behavior and reconstruct params from original URL
        const url = request.protocol + '://' + request.get('host') + request.originalUrl;
        const searchParams = new URL(url).searchParams;
        const query = Object.fromEntries(searchParams);
        try {
            const r = await requestHandler({
                method: request.method,
                path: request.path,
                query,
                requestBody: request.body,
                prisma,
                modelMeta,
                zodSchemas,
                logger: options.logger,
            });
            if (sendResponse === false) {
                // attach response and pass control to the next middleware
                response.locals = {
                    status: r.status,
                    body: r.body,
                };
                return next();
            }
            return response.status(r.status).json(r.body);
        }
        catch (err) {
            if (sendResponse === false) {
                throw err;
            }
            return response.status(500).json({ message: `An unhandled error occurred: ${err}` });
        }
    };
};
exports.ZenStackMiddleware = factory;
exports.default = factory;
//# sourceMappingURL=middleware.js.map