"use strict";
/* eslint-disable @typescript-eslint/no-non-null-assertion */
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = factory;
const api_1 = require("../api");
const shared_1 = require("../shared");
/**
 * Creates a Next.js API endpoint (traditional "pages" route) request handler which encapsulates Prisma CRUD operations.
 *
 * @param options Options for initialization
 * @returns An API endpoint request handler
 */
function factory(options) {
    const { modelMeta, zodSchemas } = (0, shared_1.loadAssets)(options);
    const requestHandler = options.handler || (0, api_1.RPCApiHandler)();
    return async (req, res) => {
        const prisma = (await options.getPrisma(req, res));
        if (!prisma) {
            res.status(500).json({ message: 'unable to get prisma from request context' });
            return;
        }
        if (!req.query.path) {
            res.status(400).json({ message: 'missing path parameter' });
            return;
        }
        const path = req.query.path.join('/');
        try {
            const r = await requestHandler({
                method: req.method,
                path,
                query: req.query,
                requestBody: req.body,
                prisma,
                modelMeta,
                zodSchemas,
                logger: options.logger,
            });
            res.status(r.status).send(r.body);
        }
        catch (err) {
            res.status(500).send({ message: `An unhandled error occurred: ${err}` });
        }
    };
}
//# sourceMappingURL=pages-route-handler.js.map