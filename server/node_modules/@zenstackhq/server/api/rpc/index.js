"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = makeHandler;
exports.RPCApiHandler = makeHandler;
const runtime_1 = require("@zenstackhq/runtime");
const local_helpers_1 = require("@zenstackhq/runtime/local-helpers");
const superjson_1 = __importDefault(require("superjson"));
const base_1 = require("../base");
const utils_1 = require("../utils");
(0, utils_1.registerCustomSerializers)();
const ERROR_STATUS_MAPPING = {
    [runtime_1.PrismaErrorCode.CONSTRAINT_FAILED]: 403,
    [runtime_1.PrismaErrorCode.REQUIRED_CONNECTED_RECORD_NOT_FOUND]: 404,
    [runtime_1.PrismaErrorCode.DEPEND_ON_RECORD_NOT_FOUND]: 404,
};
/**
 * Prisma RPC style API request handler that mirrors the Prisma Client API
 */
class RequestHandler extends base_1.APIHandlerBase {
    async handleRequest({ prisma, method, path, query, requestBody, modelMeta, zodSchemas, logger, }) {
        modelMeta = modelMeta ?? this.defaultModelMeta;
        if (!modelMeta) {
            throw new Error('Model metadata is not provided or loaded from default location');
        }
        const parts = path.split('/').filter((p) => !!p);
        const op = parts.pop();
        const model = parts.pop();
        if (parts.length !== 0 || !op || !model) {
            return { status: 400, body: this.makeError('invalid request path') };
        }
        method = method.toUpperCase();
        const dbOp = op;
        let args;
        let resCode = 200;
        switch (dbOp) {
            case 'create':
            case 'createMany':
            case 'upsert':
                if (method !== 'POST') {
                    return {
                        status: 400,
                        body: this.makeError('invalid request method, only POST is supported'),
                    };
                }
                if (!requestBody) {
                    return { status: 400, body: this.makeError('missing request body') };
                }
                args = requestBody;
                // TODO: upsert's status code should be conditional
                resCode = 201;
                break;
            case 'findFirst':
            case 'findUnique':
            case 'findMany':
            case 'aggregate':
            case 'groupBy':
            case 'count':
            case 'check':
                if (method !== 'GET') {
                    return {
                        status: 400,
                        body: this.makeError('invalid request method, only GET is supported'),
                    };
                }
                try {
                    args = query?.q ? this.unmarshalQ(query.q, query.meta) : {};
                }
                catch {
                    return { status: 400, body: this.makeError('invalid "q" query parameter') };
                }
                break;
            case 'update':
            case 'updateMany':
                if (method !== 'PUT' && method !== 'PATCH') {
                    return {
                        status: 400,
                        body: this.makeError('invalid request method, only PUT AND PATCH are supported'),
                    };
                }
                if (!requestBody) {
                    return { status: 400, body: this.makeError('missing request body') };
                }
                args = requestBody;
                break;
            case 'delete':
            case 'deleteMany':
                if (method !== 'DELETE') {
                    return {
                        status: 400,
                        body: this.makeError('invalid request method, only DELETE is supported'),
                    };
                }
                try {
                    args = query?.q ? this.unmarshalQ(query.q, query.meta) : {};
                }
                catch {
                    return { status: 400, body: this.makeError('invalid "q" query parameter') };
                }
                break;
            default:
                return { status: 400, body: this.makeError('invalid operation: ' + op) };
        }
        const { error, zodErrors, data: parsedArgs } = await this.processRequestPayload(args, model, dbOp, zodSchemas);
        if (error) {
            return { status: 422, body: this.makeError(error, runtime_1.CrudFailureReason.DATA_VALIDATION_VIOLATION, zodErrors) };
        }
        try {
            if (!prisma[model]) {
                return { status: 400, body: this.makeError(`unknown model name: ${model}`) };
            }
            const result = await prisma[model][dbOp](parsedArgs);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            let response = { data: result };
            // superjson serialize response
            if (result) {
                const { json, meta } = superjson_1.default.serialize(result);
                response = { data: json };
                if (meta) {
                    response.meta = { serialization: meta };
                }
            }
            return { status: resCode, body: response };
        }
        catch (err) {
            if ((0, runtime_1.isPrismaClientKnownRequestError)(err)) {
                let status;
                if (err.meta?.reason === runtime_1.CrudFailureReason.DATA_VALIDATION_VIOLATION) {
                    // data validation error
                    status = 422;
                }
                else {
                    status = ERROR_STATUS_MAPPING[err.code] ?? 400;
                }
                const { error } = this.makeError(err.message, err.meta?.reason, err.meta?.zodErrors);
                return {
                    status,
                    body: {
                        error: {
                            ...error,
                            prisma: true,
                            code: err.code,
                        },
                    },
                };
            }
            else if ((0, runtime_1.isPrismaClientUnknownRequestError)(err) || (0, runtime_1.isPrismaClientValidationError)(err)) {
                (0, utils_1.logError)(logger, err.message);
                return {
                    status: 400,
                    body: {
                        error: {
                            prisma: true,
                            message: err.message,
                        },
                    },
                };
            }
            else {
                const _err = err;
                (0, utils_1.logError)(logger, _err.message + (_err.stack ? '\n' + _err.stack : ''));
                return {
                    status: 400,
                    body: this.makeError(err.message),
                };
            }
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    makeError(message, reason, zodErrors) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const error = { message, reason };
        if (reason === runtime_1.CrudFailureReason.ACCESS_POLICY_VIOLATION || reason === runtime_1.CrudFailureReason.RESULT_NOT_READABLE) {
            error.rejectedByPolicy = true;
        }
        if (reason === runtime_1.CrudFailureReason.DATA_VALIDATION_VIOLATION) {
            error.rejectedByValidation = true;
        }
        if (zodErrors) {
            error.zodErrors = zodErrors;
        }
        return { error };
    }
    async processRequestPayload(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    args, model, dbOp, zodSchemas) {
        const { meta, ...rest } = args;
        if (meta?.serialization) {
            // superjson deserialization
            args = superjson_1.default.deserialize({ json: rest, meta: meta.serialization });
        }
        return this.zodValidate(zodSchemas, model, dbOp, args);
    }
    getZodSchema(zodSchemas, model, operation) {
        // e.g.: UserInputSchema { findUnique: [schema] }
        return zodSchemas.input?.[`${(0, local_helpers_1.upperCaseFirst)(model)}InputSchema`]?.[operation];
    }
    zodValidate(zodSchemas, model, operation, args) {
        const zodSchema = zodSchemas && this.getZodSchema(zodSchemas, model, operation);
        if (zodSchema) {
            const parseResult = zodSchema.safeParse(args);
            if (parseResult.success) {
                return { data: args, error: undefined, zodErrors: undefined };
            }
            else {
                return {
                    data: undefined,
                    error: (0, local_helpers_1.getZodErrorMessage)(parseResult.error),
                    zodErrors: parseResult.error,
                };
            }
        }
        else {
            return { data: args, error: undefined, zodErrors: undefined };
        }
    }
    unmarshalQ(value, meta) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        let parsedValue;
        try {
            parsedValue = JSON.parse(value);
        }
        catch {
            throw new Error('invalid "q" query parameter');
        }
        if (meta) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            let parsedMeta;
            try {
                parsedMeta = JSON.parse(meta);
            }
            catch {
                throw new Error('invalid "meta" query parameter');
            }
            if (parsedMeta.serialization) {
                return superjson_1.default.deserialize({ json: parsedValue, meta: parsedMeta.serialization });
            }
        }
        return parsedValue;
    }
}
function makeHandler() {
    const handler = new RequestHandler();
    return handler.handleRequest.bind(handler);
}
//# sourceMappingURL=index.js.map