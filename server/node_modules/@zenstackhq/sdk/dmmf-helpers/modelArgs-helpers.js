"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addMissingInputObjectTypesForModelArgs = addMissingInputObjectTypesForModelArgs;
const semver_1 = __importDefault(require("semver"));
const prisma_1 = require("../prisma");
const model_helpers_1 = require("./model-helpers");
function addMissingInputObjectTypesForModelArgs(inputObjectTypes, models) {
    const modelArgsInputObjectTypes = generateModelArgsInputObjectTypes(models);
    for (const modelArgsInputObjectType of modelArgsInputObjectTypes) {
        inputObjectTypes.push(modelArgsInputObjectType);
    }
}
function generateModelArgsInputObjectTypes(models) {
    const modelArgsInputObjectTypes = [];
    const prismaVersion = (0, prisma_1.getPrismaVersion)();
    for (const model of models) {
        const { name: modelName } = model;
        const fields = [];
        const selectField = {
            name: 'select',
            isRequired: false,
            isNullable: false,
            inputTypes: [
                {
                    isList: false,
                    type: `${modelName}Select`,
                    location: 'inputObjectTypes',
                    namespace: 'prisma',
                },
            ],
        };
        fields.push(selectField);
        const hasRelationToAnotherModel = (0, model_helpers_1.checkModelHasModelRelation)(model);
        if (hasRelationToAnotherModel) {
            const includeField = {
                name: 'include',
                isRequired: false,
                isNullable: false,
                inputTypes: [
                    {
                        isList: false,
                        type: `${modelName}Include`,
                        location: 'inputObjectTypes',
                        namespace: 'prisma',
                    },
                ],
            };
            fields.push(includeField);
        }
        const modelArgsInputObjectType = {
            name: prismaVersion && semver_1.default.gte(prismaVersion, '6.0.0')
                ? `${modelName}DefaultArgs` // Prisma 6+ removed [Model]Args type
                : `${modelName}Args`,
            constraints: {
                maxNumFields: null,
                minNumFields: null,
            },
            fields,
        };
        modelArgsInputObjectTypes.push(modelArgsInputObjectType);
    }
    return modelArgsInputObjectTypes;
}
//# sourceMappingURL=modelArgs-helpers.js.map