/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */

import type { Prisma, Privilege } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreatePrivilege(options?: Omit<(UseMutationOptions<(Privilege | undefined), DefaultError, Prisma.PrivilegeCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PrivilegeCreateArgs, DefaultError, Privilege, true>('Privilege', 'POST', `${endpoint}/privilege/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PrivilegeCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PrivilegeCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, Privilege, Prisma.PrivilegeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PrivilegeCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Privilege, Prisma.PrivilegeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyPrivilege(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PrivilegeCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PrivilegeCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('Privilege', 'POST', `${endpoint}/privilege/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PrivilegeCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PrivilegeCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PrivilegeCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyPrivilege<TArgs extends Prisma.PrivilegeFindManyArgs, TQueryFnData = Array<Prisma.PrivilegeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PrivilegeFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Privilege', `${endpoint}/privilege/findMany`, args, options, fetch);
}

export function useInfiniteFindManyPrivilege<TArgs extends Prisma.PrivilegeFindManyArgs, TQueryFnData = Array<Prisma.PrivilegeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PrivilegeFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('Privilege', `${endpoint}/privilege/findMany`, args, options, fetch);
}

export function useSuspenseFindManyPrivilege<TArgs extends Prisma.PrivilegeFindManyArgs, TQueryFnData = Array<Prisma.PrivilegeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PrivilegeFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Privilege', `${endpoint}/privilege/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyPrivilege<TArgs extends Prisma.PrivilegeFindManyArgs, TQueryFnData = Array<Prisma.PrivilegeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PrivilegeFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('Privilege', `${endpoint}/privilege/findMany`, args, options, fetch);
}

export function useFindUniquePrivilege<TArgs extends Prisma.PrivilegeFindUniqueArgs, TQueryFnData = Prisma.PrivilegeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PrivilegeFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Privilege', `${endpoint}/privilege/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniquePrivilege<TArgs extends Prisma.PrivilegeFindUniqueArgs, TQueryFnData = Prisma.PrivilegeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PrivilegeFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Privilege', `${endpoint}/privilege/findUnique`, args, options, fetch);
}

export function useFindFirstPrivilege<TArgs extends Prisma.PrivilegeFindFirstArgs, TQueryFnData = Prisma.PrivilegeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PrivilegeFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Privilege', `${endpoint}/privilege/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstPrivilege<TArgs extends Prisma.PrivilegeFindFirstArgs, TQueryFnData = Prisma.PrivilegeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PrivilegeFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Privilege', `${endpoint}/privilege/findFirst`, args, options, fetch);
}

export function useUpdatePrivilege(options?: Omit<(UseMutationOptions<(Privilege | undefined), DefaultError, Prisma.PrivilegeUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PrivilegeUpdateArgs, DefaultError, Privilege, true>('Privilege', 'PUT', `${endpoint}/privilege/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PrivilegeUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PrivilegeUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, Privilege, Prisma.PrivilegeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PrivilegeUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Privilege, Prisma.PrivilegeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyPrivilege(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PrivilegeUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PrivilegeUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('Privilege', 'PUT', `${endpoint}/privilege/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PrivilegeUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PrivilegeUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PrivilegeUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertPrivilege(options?: Omit<(UseMutationOptions<(Privilege | undefined), DefaultError, Prisma.PrivilegeUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PrivilegeUpsertArgs, DefaultError, Privilege, true>('Privilege', 'POST', `${endpoint}/privilege/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PrivilegeUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.PrivilegeUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, Privilege, Prisma.PrivilegeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PrivilegeUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Privilege, Prisma.PrivilegeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletePrivilege(options?: Omit<(UseMutationOptions<(Privilege | undefined), DefaultError, Prisma.PrivilegeDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PrivilegeDeleteArgs, DefaultError, Privilege, true>('Privilege', 'DELETE', `${endpoint}/privilege/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PrivilegeDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.PrivilegeDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, Privilege, Prisma.PrivilegeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PrivilegeDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Privilege, Prisma.PrivilegeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyPrivilege(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PrivilegeDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PrivilegeDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('Privilege', 'DELETE', `${endpoint}/privilege/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PrivilegeDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PrivilegeDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PrivilegeDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregatePrivilege<TArgs extends Prisma.PrivilegeAggregateArgs, TQueryFnData = Prisma.GetPrivilegeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PrivilegeAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Privilege', `${endpoint}/privilege/aggregate`, args, options, fetch);
}

export function useSuspenseAggregatePrivilege<TArgs extends Prisma.PrivilegeAggregateArgs, TQueryFnData = Prisma.GetPrivilegeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PrivilegeAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Privilege', `${endpoint}/privilege/aggregate`, args, options, fetch);
}

export function useGroupByPrivilege<TArgs extends Prisma.PrivilegeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PrivilegeGroupByArgs['orderBy'] } : { orderBy?: Prisma.PrivilegeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PrivilegeGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.PrivilegeGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.PrivilegeGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.PrivilegeGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PrivilegeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Privilege', `${endpoint}/privilege/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByPrivilege<TArgs extends Prisma.PrivilegeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PrivilegeGroupByArgs['orderBy'] } : { orderBy?: Prisma.PrivilegeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PrivilegeGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.PrivilegeGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.PrivilegeGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.PrivilegeGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PrivilegeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Privilege', `${endpoint}/privilege/groupBy`, args, options, fetch);
}

export function useCountPrivilege<TArgs extends Prisma.PrivilegeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PrivilegeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PrivilegeCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Privilege', `${endpoint}/privilege/count`, args, options, fetch);
}

export function useSuspenseCountPrivilege<TArgs extends Prisma.PrivilegeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PrivilegeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PrivilegeCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Privilege', `${endpoint}/privilege/count`, args, options, fetch);
}

export function useCheckPrivilege<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; name?: string; longDescription?: string; shortDescription?: string; labId?: string; public?: boolean }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('Privilege', `${endpoint}/privilege/check`, args, options, fetch);
}
