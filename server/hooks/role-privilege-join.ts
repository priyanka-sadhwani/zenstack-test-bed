/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */

import type { Prisma, RolePrivilegeJoin } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateRolePrivilegeJoin(options?: Omit<(UseMutationOptions<(RolePrivilegeJoin | undefined), DefaultError, Prisma.RolePrivilegeJoinCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RolePrivilegeJoinCreateArgs, DefaultError, RolePrivilegeJoin, true>('RolePrivilegeJoin', 'POST', `${endpoint}/rolePrivilegeJoin/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RolePrivilegeJoinCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RolePrivilegeJoinCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RolePrivilegeJoin, Prisma.RolePrivilegeJoinGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RolePrivilegeJoinCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RolePrivilegeJoin, Prisma.RolePrivilegeJoinGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyRolePrivilegeJoin(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RolePrivilegeJoinCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RolePrivilegeJoinCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('RolePrivilegeJoin', 'POST', `${endpoint}/rolePrivilegeJoin/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RolePrivilegeJoinCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RolePrivilegeJoinCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RolePrivilegeJoinCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyRolePrivilegeJoin<TArgs extends Prisma.RolePrivilegeJoinFindManyArgs, TQueryFnData = Array<Prisma.RolePrivilegeJoinGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RolePrivilegeJoinFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RolePrivilegeJoin', `${endpoint}/rolePrivilegeJoin/findMany`, args, options, fetch);
}

export function useInfiniteFindManyRolePrivilegeJoin<TArgs extends Prisma.RolePrivilegeJoinFindManyArgs, TQueryFnData = Array<Prisma.RolePrivilegeJoinGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RolePrivilegeJoinFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('RolePrivilegeJoin', `${endpoint}/rolePrivilegeJoin/findMany`, args, options, fetch);
}

export function useSuspenseFindManyRolePrivilegeJoin<TArgs extends Prisma.RolePrivilegeJoinFindManyArgs, TQueryFnData = Array<Prisma.RolePrivilegeJoinGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RolePrivilegeJoinFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RolePrivilegeJoin', `${endpoint}/rolePrivilegeJoin/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyRolePrivilegeJoin<TArgs extends Prisma.RolePrivilegeJoinFindManyArgs, TQueryFnData = Array<Prisma.RolePrivilegeJoinGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RolePrivilegeJoinFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('RolePrivilegeJoin', `${endpoint}/rolePrivilegeJoin/findMany`, args, options, fetch);
}

export function useFindUniqueRolePrivilegeJoin<TArgs extends Prisma.RolePrivilegeJoinFindUniqueArgs, TQueryFnData = Prisma.RolePrivilegeJoinGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RolePrivilegeJoinFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RolePrivilegeJoin', `${endpoint}/rolePrivilegeJoin/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueRolePrivilegeJoin<TArgs extends Prisma.RolePrivilegeJoinFindUniqueArgs, TQueryFnData = Prisma.RolePrivilegeJoinGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RolePrivilegeJoinFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RolePrivilegeJoin', `${endpoint}/rolePrivilegeJoin/findUnique`, args, options, fetch);
}

export function useFindFirstRolePrivilegeJoin<TArgs extends Prisma.RolePrivilegeJoinFindFirstArgs, TQueryFnData = Prisma.RolePrivilegeJoinGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RolePrivilegeJoinFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RolePrivilegeJoin', `${endpoint}/rolePrivilegeJoin/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstRolePrivilegeJoin<TArgs extends Prisma.RolePrivilegeJoinFindFirstArgs, TQueryFnData = Prisma.RolePrivilegeJoinGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RolePrivilegeJoinFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RolePrivilegeJoin', `${endpoint}/rolePrivilegeJoin/findFirst`, args, options, fetch);
}

export function useUpdateRolePrivilegeJoin(options?: Omit<(UseMutationOptions<(RolePrivilegeJoin | undefined), DefaultError, Prisma.RolePrivilegeJoinUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RolePrivilegeJoinUpdateArgs, DefaultError, RolePrivilegeJoin, true>('RolePrivilegeJoin', 'PUT', `${endpoint}/rolePrivilegeJoin/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RolePrivilegeJoinUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RolePrivilegeJoinUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RolePrivilegeJoin, Prisma.RolePrivilegeJoinGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RolePrivilegeJoinUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RolePrivilegeJoin, Prisma.RolePrivilegeJoinGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyRolePrivilegeJoin(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RolePrivilegeJoinUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RolePrivilegeJoinUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('RolePrivilegeJoin', 'PUT', `${endpoint}/rolePrivilegeJoin/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RolePrivilegeJoinUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RolePrivilegeJoinUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RolePrivilegeJoinUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertRolePrivilegeJoin(options?: Omit<(UseMutationOptions<(RolePrivilegeJoin | undefined), DefaultError, Prisma.RolePrivilegeJoinUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RolePrivilegeJoinUpsertArgs, DefaultError, RolePrivilegeJoin, true>('RolePrivilegeJoin', 'POST', `${endpoint}/rolePrivilegeJoin/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RolePrivilegeJoinUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.RolePrivilegeJoinUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RolePrivilegeJoin, Prisma.RolePrivilegeJoinGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RolePrivilegeJoinUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RolePrivilegeJoin, Prisma.RolePrivilegeJoinGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteRolePrivilegeJoin(options?: Omit<(UseMutationOptions<(RolePrivilegeJoin | undefined), DefaultError, Prisma.RolePrivilegeJoinDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RolePrivilegeJoinDeleteArgs, DefaultError, RolePrivilegeJoin, true>('RolePrivilegeJoin', 'DELETE', `${endpoint}/rolePrivilegeJoin/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RolePrivilegeJoinDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.RolePrivilegeJoinDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RolePrivilegeJoin, Prisma.RolePrivilegeJoinGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RolePrivilegeJoinDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RolePrivilegeJoin, Prisma.RolePrivilegeJoinGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyRolePrivilegeJoin(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RolePrivilegeJoinDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RolePrivilegeJoinDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('RolePrivilegeJoin', 'DELETE', `${endpoint}/rolePrivilegeJoin/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RolePrivilegeJoinDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RolePrivilegeJoinDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RolePrivilegeJoinDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateRolePrivilegeJoin<TArgs extends Prisma.RolePrivilegeJoinAggregateArgs, TQueryFnData = Prisma.GetRolePrivilegeJoinAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RolePrivilegeJoinAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RolePrivilegeJoin', `${endpoint}/rolePrivilegeJoin/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateRolePrivilegeJoin<TArgs extends Prisma.RolePrivilegeJoinAggregateArgs, TQueryFnData = Prisma.GetRolePrivilegeJoinAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RolePrivilegeJoinAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RolePrivilegeJoin', `${endpoint}/rolePrivilegeJoin/aggregate`, args, options, fetch);
}

export function useGroupByRolePrivilegeJoin<TArgs extends Prisma.RolePrivilegeJoinGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.RolePrivilegeJoinGroupByArgs['orderBy'] } : { orderBy?: Prisma.RolePrivilegeJoinGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.RolePrivilegeJoinGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.RolePrivilegeJoinGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.RolePrivilegeJoinGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.RolePrivilegeJoinGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RolePrivilegeJoinGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RolePrivilegeJoin', `${endpoint}/rolePrivilegeJoin/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByRolePrivilegeJoin<TArgs extends Prisma.RolePrivilegeJoinGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.RolePrivilegeJoinGroupByArgs['orderBy'] } : { orderBy?: Prisma.RolePrivilegeJoinGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.RolePrivilegeJoinGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.RolePrivilegeJoinGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.RolePrivilegeJoinGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.RolePrivilegeJoinGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RolePrivilegeJoinGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RolePrivilegeJoin', `${endpoint}/rolePrivilegeJoin/groupBy`, args, options, fetch);
}

export function useCountRolePrivilegeJoin<TArgs extends Prisma.RolePrivilegeJoinCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.RolePrivilegeJoinCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RolePrivilegeJoinCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RolePrivilegeJoin', `${endpoint}/rolePrivilegeJoin/count`, args, options, fetch);
}

export function useSuspenseCountRolePrivilegeJoin<TArgs extends Prisma.RolePrivilegeJoinCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.RolePrivilegeJoinCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RolePrivilegeJoinCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RolePrivilegeJoin', `${endpoint}/rolePrivilegeJoin/count`, args, options, fetch);
}

export function useCheckRolePrivilegeJoin<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { roleId?: string; privilegeId?: string; order?: number }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('RolePrivilegeJoin', `${endpoint}/rolePrivilegeJoin/check`, args, options, fetch);
}
