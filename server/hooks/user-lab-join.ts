/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */

import type { Prisma, UserLabJoin } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateUserLabJoin(options?: Omit<(UseMutationOptions<(UserLabJoin | undefined), DefaultError, Prisma.UserLabJoinCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserLabJoinCreateArgs, DefaultError, UserLabJoin, true>('UserLabJoin', 'POST', `${endpoint}/userLabJoin/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserLabJoinCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserLabJoinCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, UserLabJoin, Prisma.UserLabJoinGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserLabJoinCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, UserLabJoin, Prisma.UserLabJoinGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyUserLabJoin(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserLabJoinCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserLabJoinCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('UserLabJoin', 'POST', `${endpoint}/userLabJoin/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserLabJoinCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserLabJoinCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserLabJoinCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyUserLabJoin<TArgs extends Prisma.UserLabJoinFindManyArgs, TQueryFnData = Array<Prisma.UserLabJoinGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.UserLabJoinFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserLabJoin', `${endpoint}/userLabJoin/findMany`, args, options, fetch);
}

export function useInfiniteFindManyUserLabJoin<TArgs extends Prisma.UserLabJoinFindManyArgs, TQueryFnData = Array<Prisma.UserLabJoinGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.UserLabJoinFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('UserLabJoin', `${endpoint}/userLabJoin/findMany`, args, options, fetch);
}

export function useSuspenseFindManyUserLabJoin<TArgs extends Prisma.UserLabJoinFindManyArgs, TQueryFnData = Array<Prisma.UserLabJoinGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.UserLabJoinFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('UserLabJoin', `${endpoint}/userLabJoin/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyUserLabJoin<TArgs extends Prisma.UserLabJoinFindManyArgs, TQueryFnData = Array<Prisma.UserLabJoinGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.UserLabJoinFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('UserLabJoin', `${endpoint}/userLabJoin/findMany`, args, options, fetch);
}

export function useFindUniqueUserLabJoin<TArgs extends Prisma.UserLabJoinFindUniqueArgs, TQueryFnData = Prisma.UserLabJoinGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.UserLabJoinFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserLabJoin', `${endpoint}/userLabJoin/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueUserLabJoin<TArgs extends Prisma.UserLabJoinFindUniqueArgs, TQueryFnData = Prisma.UserLabJoinGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.UserLabJoinFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('UserLabJoin', `${endpoint}/userLabJoin/findUnique`, args, options, fetch);
}

export function useFindFirstUserLabJoin<TArgs extends Prisma.UserLabJoinFindFirstArgs, TQueryFnData = Prisma.UserLabJoinGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.UserLabJoinFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserLabJoin', `${endpoint}/userLabJoin/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstUserLabJoin<TArgs extends Prisma.UserLabJoinFindFirstArgs, TQueryFnData = Prisma.UserLabJoinGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.UserLabJoinFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('UserLabJoin', `${endpoint}/userLabJoin/findFirst`, args, options, fetch);
}

export function useUpdateUserLabJoin(options?: Omit<(UseMutationOptions<(UserLabJoin | undefined), DefaultError, Prisma.UserLabJoinUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserLabJoinUpdateArgs, DefaultError, UserLabJoin, true>('UserLabJoin', 'PUT', `${endpoint}/userLabJoin/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserLabJoinUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserLabJoinUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, UserLabJoin, Prisma.UserLabJoinGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserLabJoinUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, UserLabJoin, Prisma.UserLabJoinGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyUserLabJoin(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserLabJoinUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserLabJoinUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('UserLabJoin', 'PUT', `${endpoint}/userLabJoin/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserLabJoinUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserLabJoinUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserLabJoinUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertUserLabJoin(options?: Omit<(UseMutationOptions<(UserLabJoin | undefined), DefaultError, Prisma.UserLabJoinUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserLabJoinUpsertArgs, DefaultError, UserLabJoin, true>('UserLabJoin', 'POST', `${endpoint}/userLabJoin/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserLabJoinUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserLabJoinUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, UserLabJoin, Prisma.UserLabJoinGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserLabJoinUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, UserLabJoin, Prisma.UserLabJoinGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteUserLabJoin(options?: Omit<(UseMutationOptions<(UserLabJoin | undefined), DefaultError, Prisma.UserLabJoinDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserLabJoinDeleteArgs, DefaultError, UserLabJoin, true>('UserLabJoin', 'DELETE', `${endpoint}/userLabJoin/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserLabJoinDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserLabJoinDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, UserLabJoin, Prisma.UserLabJoinGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserLabJoinDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, UserLabJoin, Prisma.UserLabJoinGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyUserLabJoin(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserLabJoinDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserLabJoinDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('UserLabJoin', 'DELETE', `${endpoint}/userLabJoin/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserLabJoinDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserLabJoinDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserLabJoinDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateUserLabJoin<TArgs extends Prisma.UserLabJoinAggregateArgs, TQueryFnData = Prisma.GetUserLabJoinAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.UserLabJoinAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserLabJoin', `${endpoint}/userLabJoin/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateUserLabJoin<TArgs extends Prisma.UserLabJoinAggregateArgs, TQueryFnData = Prisma.GetUserLabJoinAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.UserLabJoinAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('UserLabJoin', `${endpoint}/userLabJoin/aggregate`, args, options, fetch);
}

export function useGroupByUserLabJoin<TArgs extends Prisma.UserLabJoinGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.UserLabJoinGroupByArgs['orderBy'] } : { orderBy?: Prisma.UserLabJoinGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.UserLabJoinGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.UserLabJoinGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.UserLabJoinGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.UserLabJoinGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.UserLabJoinGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserLabJoin', `${endpoint}/userLabJoin/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByUserLabJoin<TArgs extends Prisma.UserLabJoinGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.UserLabJoinGroupByArgs['orderBy'] } : { orderBy?: Prisma.UserLabJoinGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.UserLabJoinGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.UserLabJoinGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.UserLabJoinGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.UserLabJoinGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.UserLabJoinGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('UserLabJoin', `${endpoint}/userLabJoin/groupBy`, args, options, fetch);
}

export function useCountUserLabJoin<TArgs extends Prisma.UserLabJoinCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.UserLabJoinCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.UserLabJoinCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserLabJoin', `${endpoint}/userLabJoin/count`, args, options, fetch);
}

export function useSuspenseCountUserLabJoin<TArgs extends Prisma.UserLabJoinCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.UserLabJoinCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.UserLabJoinCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('UserLabJoin', `${endpoint}/userLabJoin/count`, args, options, fetch);
}

export function useCheckUserLabJoin<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { userId?: string; labId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('UserLabJoin', `${endpoint}/userLabJoin/check`, args, options, fetch);
}
