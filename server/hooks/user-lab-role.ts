/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */

import type { Prisma, UserLabRole } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateUserLabRole(options?: Omit<(UseMutationOptions<(UserLabRole | undefined), DefaultError, Prisma.UserLabRoleCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserLabRoleCreateArgs, DefaultError, UserLabRole, true>('UserLabRole', 'POST', `${endpoint}/userLabRole/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserLabRoleCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserLabRoleCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, UserLabRole, Prisma.UserLabRoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserLabRoleCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, UserLabRole, Prisma.UserLabRoleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyUserLabRole(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserLabRoleCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserLabRoleCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('UserLabRole', 'POST', `${endpoint}/userLabRole/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserLabRoleCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserLabRoleCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserLabRoleCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyUserLabRole<TArgs extends Prisma.UserLabRoleFindManyArgs, TQueryFnData = Array<Prisma.UserLabRoleGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.UserLabRoleFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserLabRole', `${endpoint}/userLabRole/findMany`, args, options, fetch);
}

export function useInfiniteFindManyUserLabRole<TArgs extends Prisma.UserLabRoleFindManyArgs, TQueryFnData = Array<Prisma.UserLabRoleGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.UserLabRoleFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('UserLabRole', `${endpoint}/userLabRole/findMany`, args, options, fetch);
}

export function useSuspenseFindManyUserLabRole<TArgs extends Prisma.UserLabRoleFindManyArgs, TQueryFnData = Array<Prisma.UserLabRoleGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.UserLabRoleFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('UserLabRole', `${endpoint}/userLabRole/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyUserLabRole<TArgs extends Prisma.UserLabRoleFindManyArgs, TQueryFnData = Array<Prisma.UserLabRoleGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.UserLabRoleFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('UserLabRole', `${endpoint}/userLabRole/findMany`, args, options, fetch);
}

export function useFindUniqueUserLabRole<TArgs extends Prisma.UserLabRoleFindUniqueArgs, TQueryFnData = Prisma.UserLabRoleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.UserLabRoleFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserLabRole', `${endpoint}/userLabRole/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueUserLabRole<TArgs extends Prisma.UserLabRoleFindUniqueArgs, TQueryFnData = Prisma.UserLabRoleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.UserLabRoleFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('UserLabRole', `${endpoint}/userLabRole/findUnique`, args, options, fetch);
}

export function useFindFirstUserLabRole<TArgs extends Prisma.UserLabRoleFindFirstArgs, TQueryFnData = Prisma.UserLabRoleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.UserLabRoleFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserLabRole', `${endpoint}/userLabRole/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstUserLabRole<TArgs extends Prisma.UserLabRoleFindFirstArgs, TQueryFnData = Prisma.UserLabRoleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.UserLabRoleFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('UserLabRole', `${endpoint}/userLabRole/findFirst`, args, options, fetch);
}

export function useUpdateUserLabRole(options?: Omit<(UseMutationOptions<(UserLabRole | undefined), DefaultError, Prisma.UserLabRoleUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserLabRoleUpdateArgs, DefaultError, UserLabRole, true>('UserLabRole', 'PUT', `${endpoint}/userLabRole/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserLabRoleUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserLabRoleUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, UserLabRole, Prisma.UserLabRoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserLabRoleUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, UserLabRole, Prisma.UserLabRoleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyUserLabRole(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserLabRoleUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserLabRoleUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('UserLabRole', 'PUT', `${endpoint}/userLabRole/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserLabRoleUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserLabRoleUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserLabRoleUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertUserLabRole(options?: Omit<(UseMutationOptions<(UserLabRole | undefined), DefaultError, Prisma.UserLabRoleUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserLabRoleUpsertArgs, DefaultError, UserLabRole, true>('UserLabRole', 'POST', `${endpoint}/userLabRole/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserLabRoleUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserLabRoleUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, UserLabRole, Prisma.UserLabRoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserLabRoleUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, UserLabRole, Prisma.UserLabRoleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteUserLabRole(options?: Omit<(UseMutationOptions<(UserLabRole | undefined), DefaultError, Prisma.UserLabRoleDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserLabRoleDeleteArgs, DefaultError, UserLabRole, true>('UserLabRole', 'DELETE', `${endpoint}/userLabRole/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserLabRoleDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserLabRoleDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, UserLabRole, Prisma.UserLabRoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserLabRoleDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, UserLabRole, Prisma.UserLabRoleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyUserLabRole(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserLabRoleDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserLabRoleDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('UserLabRole', 'DELETE', `${endpoint}/userLabRole/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserLabRoleDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserLabRoleDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserLabRoleDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateUserLabRole<TArgs extends Prisma.UserLabRoleAggregateArgs, TQueryFnData = Prisma.GetUserLabRoleAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.UserLabRoleAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserLabRole', `${endpoint}/userLabRole/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateUserLabRole<TArgs extends Prisma.UserLabRoleAggregateArgs, TQueryFnData = Prisma.GetUserLabRoleAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.UserLabRoleAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('UserLabRole', `${endpoint}/userLabRole/aggregate`, args, options, fetch);
}

export function useGroupByUserLabRole<TArgs extends Prisma.UserLabRoleGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.UserLabRoleGroupByArgs['orderBy'] } : { orderBy?: Prisma.UserLabRoleGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.UserLabRoleGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.UserLabRoleGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.UserLabRoleGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.UserLabRoleGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.UserLabRoleGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserLabRole', `${endpoint}/userLabRole/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByUserLabRole<TArgs extends Prisma.UserLabRoleGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.UserLabRoleGroupByArgs['orderBy'] } : { orderBy?: Prisma.UserLabRoleGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.UserLabRoleGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.UserLabRoleGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.UserLabRoleGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.UserLabRoleGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.UserLabRoleGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('UserLabRole', `${endpoint}/userLabRole/groupBy`, args, options, fetch);
}

export function useCountUserLabRole<TArgs extends Prisma.UserLabRoleCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.UserLabRoleCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.UserLabRoleCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserLabRole', `${endpoint}/userLabRole/count`, args, options, fetch);
}

export function useSuspenseCountUserLabRole<TArgs extends Prisma.UserLabRoleCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.UserLabRoleCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.UserLabRoleCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('UserLabRole', `${endpoint}/userLabRole/count`, args, options, fetch);
}

export function useCheckUserLabRole<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { userId?: string; labId?: string; roleId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('UserLabRole', `${endpoint}/userLabRole/check`, args, options, fetch);
}
