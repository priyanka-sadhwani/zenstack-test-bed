/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */

import type { Prisma, LabPermission } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateLabPermission(options?: Omit<(UseMutationOptions<(LabPermission | undefined), DefaultError, Prisma.LabPermissionCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabPermissionCreateArgs, DefaultError, LabPermission, true>('LabPermission', 'POST', `${endpoint}/labPermission/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabPermissionCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabPermissionCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LabPermission, Prisma.LabPermissionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LabPermissionCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LabPermission, Prisma.LabPermissionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyLabPermission(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.LabPermissionCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabPermissionCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('LabPermission', 'POST', `${endpoint}/labPermission/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabPermissionCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabPermissionCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.LabPermissionCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyLabPermission<TArgs extends Prisma.LabPermissionFindManyArgs, TQueryFnData = Array<Prisma.LabPermissionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabPermissionFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabPermission', `${endpoint}/labPermission/findMany`, args, options, fetch);
}

export function useInfiniteFindManyLabPermission<TArgs extends Prisma.LabPermissionFindManyArgs, TQueryFnData = Array<Prisma.LabPermissionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabPermissionFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('LabPermission', `${endpoint}/labPermission/findMany`, args, options, fetch);
}

export function useSuspenseFindManyLabPermission<TArgs extends Prisma.LabPermissionFindManyArgs, TQueryFnData = Array<Prisma.LabPermissionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabPermissionFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabPermission', `${endpoint}/labPermission/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyLabPermission<TArgs extends Prisma.LabPermissionFindManyArgs, TQueryFnData = Array<Prisma.LabPermissionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabPermissionFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('LabPermission', `${endpoint}/labPermission/findMany`, args, options, fetch);
}

export function useFindUniqueLabPermission<TArgs extends Prisma.LabPermissionFindUniqueArgs, TQueryFnData = Prisma.LabPermissionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LabPermissionFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabPermission', `${endpoint}/labPermission/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueLabPermission<TArgs extends Prisma.LabPermissionFindUniqueArgs, TQueryFnData = Prisma.LabPermissionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LabPermissionFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabPermission', `${endpoint}/labPermission/findUnique`, args, options, fetch);
}

export function useFindFirstLabPermission<TArgs extends Prisma.LabPermissionFindFirstArgs, TQueryFnData = Prisma.LabPermissionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabPermissionFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabPermission', `${endpoint}/labPermission/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstLabPermission<TArgs extends Prisma.LabPermissionFindFirstArgs, TQueryFnData = Prisma.LabPermissionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabPermissionFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabPermission', `${endpoint}/labPermission/findFirst`, args, options, fetch);
}

export function useUpdateLabPermission(options?: Omit<(UseMutationOptions<(LabPermission | undefined), DefaultError, Prisma.LabPermissionUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabPermissionUpdateArgs, DefaultError, LabPermission, true>('LabPermission', 'PUT', `${endpoint}/labPermission/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabPermissionUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabPermissionUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LabPermission, Prisma.LabPermissionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LabPermissionUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LabPermission, Prisma.LabPermissionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyLabPermission(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.LabPermissionUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabPermissionUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('LabPermission', 'PUT', `${endpoint}/labPermission/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabPermissionUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabPermissionUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.LabPermissionUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertLabPermission(options?: Omit<(UseMutationOptions<(LabPermission | undefined), DefaultError, Prisma.LabPermissionUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabPermissionUpsertArgs, DefaultError, LabPermission, true>('LabPermission', 'POST', `${endpoint}/labPermission/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabPermissionUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabPermissionUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LabPermission, Prisma.LabPermissionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LabPermissionUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LabPermission, Prisma.LabPermissionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteLabPermission(options?: Omit<(UseMutationOptions<(LabPermission | undefined), DefaultError, Prisma.LabPermissionDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabPermissionDeleteArgs, DefaultError, LabPermission, true>('LabPermission', 'DELETE', `${endpoint}/labPermission/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabPermissionDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabPermissionDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LabPermission, Prisma.LabPermissionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LabPermissionDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LabPermission, Prisma.LabPermissionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyLabPermission(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.LabPermissionDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabPermissionDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('LabPermission', 'DELETE', `${endpoint}/labPermission/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabPermissionDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabPermissionDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.LabPermissionDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateLabPermission<TArgs extends Prisma.LabPermissionAggregateArgs, TQueryFnData = Prisma.GetLabPermissionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LabPermissionAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabPermission', `${endpoint}/labPermission/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateLabPermission<TArgs extends Prisma.LabPermissionAggregateArgs, TQueryFnData = Prisma.GetLabPermissionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LabPermissionAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabPermission', `${endpoint}/labPermission/aggregate`, args, options, fetch);
}

export function useGroupByLabPermission<TArgs extends Prisma.LabPermissionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.LabPermissionGroupByArgs['orderBy'] } : { orderBy?: Prisma.LabPermissionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.LabPermissionGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.LabPermissionGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.LabPermissionGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.LabPermissionGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.LabPermissionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabPermission', `${endpoint}/labPermission/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByLabPermission<TArgs extends Prisma.LabPermissionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.LabPermissionGroupByArgs['orderBy'] } : { orderBy?: Prisma.LabPermissionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.LabPermissionGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.LabPermissionGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.LabPermissionGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.LabPermissionGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.LabPermissionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabPermission', `${endpoint}/labPermission/groupBy`, args, options, fetch);
}

export function useCountLabPermission<TArgs extends Prisma.LabPermissionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.LabPermissionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabPermissionCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabPermission', `${endpoint}/labPermission/count`, args, options, fetch);
}

export function useSuspenseCountLabPermission<TArgs extends Prisma.LabPermissionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.LabPermissionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabPermissionCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabPermission', `${endpoint}/labPermission/count`, args, options, fetch);
}

export function useCheckLabPermission<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; name?: string; labId?: string; type?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('LabPermission', `${endpoint}/labPermission/check`, args, options, fetch);
}
